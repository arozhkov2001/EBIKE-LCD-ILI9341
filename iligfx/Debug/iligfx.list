
iligfx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009bf8  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e8  0800f2e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800f2e8  0800f2e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f2e8  0800f2e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2e8  0800f2e8  0001f2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2ec  0800f2ec  0001f2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800f2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  0800f368  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800f368  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001180b  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f5f  00000000  00000000  000318ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00034810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  00035848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf5c  00000000  00000000  000366e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013db4  00000000  00000000  0005263c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0ac4  00000000  00000000  000663f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004630  00000000  00000000  00106f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	080056d8 	.word	0x080056d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	080056d8 	.word	0x080056d8

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__gesf2>:
 8000440:	f04f 3cff 	mov.w	ip, #4294967295
 8000444:	e006      	b.n	8000454 <__cmpsf2+0x4>
 8000446:	bf00      	nop

08000448 <__lesf2>:
 8000448:	f04f 0c01 	mov.w	ip, #1
 800044c:	e002      	b.n	8000454 <__cmpsf2+0x4>
 800044e:	bf00      	nop

08000450 <__cmpsf2>:
 8000450:	f04f 0c01 	mov.w	ip, #1
 8000454:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000458:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800045c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000460:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000464:	bf18      	it	ne
 8000466:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800046a:	d011      	beq.n	8000490 <__cmpsf2+0x40>
 800046c:	b001      	add	sp, #4
 800046e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000472:	bf18      	it	ne
 8000474:	ea90 0f01 	teqne	r0, r1
 8000478:	bf58      	it	pl
 800047a:	ebb2 0003 	subspl.w	r0, r2, r3
 800047e:	bf88      	it	hi
 8000480:	17c8      	asrhi	r0, r1, #31
 8000482:	bf38      	it	cc
 8000484:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000488:	bf18      	it	ne
 800048a:	f040 0001 	orrne.w	r0, r0, #1
 800048e:	4770      	bx	lr
 8000490:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000494:	d102      	bne.n	800049c <__cmpsf2+0x4c>
 8000496:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800049a:	d105      	bne.n	80004a8 <__cmpsf2+0x58>
 800049c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80004a0:	d1e4      	bne.n	800046c <__cmpsf2+0x1c>
 80004a2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80004a6:	d0e1      	beq.n	800046c <__cmpsf2+0x1c>
 80004a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <__aeabi_cfrcmple>:
 80004b0:	4684      	mov	ip, r0
 80004b2:	4608      	mov	r0, r1
 80004b4:	4661      	mov	r1, ip
 80004b6:	e7ff      	b.n	80004b8 <__aeabi_cfcmpeq>

080004b8 <__aeabi_cfcmpeq>:
 80004b8:	b50f      	push	{r0, r1, r2, r3, lr}
 80004ba:	f7ff ffc9 	bl	8000450 <__cmpsf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	bf48      	it	mi
 80004c2:	f110 0f00 	cmnmi.w	r0, #0
 80004c6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080004c8 <__aeabi_fcmpeq>:
 80004c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004cc:	f7ff fff4 	bl	80004b8 <__aeabi_cfcmpeq>
 80004d0:	bf0c      	ite	eq
 80004d2:	2001      	moveq	r0, #1
 80004d4:	2000      	movne	r0, #0
 80004d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80004da:	bf00      	nop

080004dc <__aeabi_fcmplt>:
 80004dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004e0:	f7ff ffea 	bl	80004b8 <__aeabi_cfcmpeq>
 80004e4:	bf34      	ite	cc
 80004e6:	2001      	movcc	r0, #1
 80004e8:	2000      	movcs	r0, #0
 80004ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80004ee:	bf00      	nop

080004f0 <__aeabi_fcmple>:
 80004f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80004f4:	f7ff ffe0 	bl	80004b8 <__aeabi_cfcmpeq>
 80004f8:	bf94      	ite	ls
 80004fa:	2001      	movls	r0, #1
 80004fc:	2000      	movhi	r0, #0
 80004fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000502:	bf00      	nop

08000504 <__aeabi_fcmpge>:
 8000504:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000508:	f7ff ffd2 	bl	80004b0 <__aeabi_cfrcmple>
 800050c:	bf94      	ite	ls
 800050e:	2001      	movls	r0, #1
 8000510:	2000      	movhi	r0, #0
 8000512:	f85d fb08 	ldr.w	pc, [sp], #8
 8000516:	bf00      	nop

08000518 <__aeabi_fcmpgt>:
 8000518:	f84d ed08 	str.w	lr, [sp, #-8]!
 800051c:	f7ff ffc8 	bl	80004b0 <__aeabi_cfrcmple>
 8000520:	bf34      	ite	cc
 8000522:	2001      	movcc	r0, #1
 8000524:	2000      	movcs	r0, #0
 8000526:	f85d fb08 	ldr.w	pc, [sp], #8
 800052a:	bf00      	nop

0800052c <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b087      	sub	sp, #28
 8000530:	af00      	add	r7, sp, #0
 8000532:	4604      	mov	r4, r0
 8000534:	4608      	mov	r0, r1
 8000536:	4611      	mov	r1, r2
 8000538:	461a      	mov	r2, r3
 800053a:	4623      	mov	r3, r4
 800053c:	80fb      	strh	r3, [r7, #6]
 800053e:	4603      	mov	r3, r0
 8000540:	80bb      	strh	r3, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	807b      	strh	r3, [r7, #2]
 8000546:	4613      	mov	r3, r2
 8000548:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000560:	887a      	ldrh	r2, [r7, #2]
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff16 	bl	8000398 <__aeabi_i2f>
 800056c:	4603      	mov	r3, r0
 800056e:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f7ff ffb1 	bl	80004dc <__aeabi_fcmplt>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000580:	2301      	movs	r3, #1
 8000582:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000584:	f04f 0300 	mov.w	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 800058a:	883a      	ldrh	r2, [r7, #0]
 800058c:	88bb      	ldrh	r3, [r7, #4]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff01 	bl	8000398 <__aeabi_i2f>
 8000596:	4603      	mov	r3, r0
 8000598:	60fb      	str	r3, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800059a:	f04f 0100 	mov.w	r1, #0
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ff9c 	bl	80004dc <__aeabi_fcmplt>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 80005aa:	2301      	movs	r3, #1
 80005ac:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d104      	bne.n	80005be <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 80005b4:	887a      	ldrh	r2, [r7, #2]
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	82fb      	strh	r3, [r7, #22]
 80005bc:	e003      	b.n	80005c6 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 80005c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005c8:	8afa      	ldrh	r2, [r7, #22]
 80005ca:	88b9      	ldrh	r1, [r7, #4]
 80005cc:	88f8      	ldrh	r0, [r7, #6]
 80005ce:	f000 fe43 	bl	8001258 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 80005d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005d4:	8afa      	ldrh	r2, [r7, #22]
 80005d6:	8839      	ldrh	r1, [r7, #0]
 80005d8:	88f8      	ldrh	r0, [r7, #6]
 80005da:	f000 fe3d 	bl	8001258 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80005de:	7cbb      	ldrb	r3, [r7, #18]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d104      	bne.n	80005ee <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 80005e4:	883a      	ldrh	r2, [r7, #0]
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	82bb      	strh	r3, [r7, #20]
 80005ec:	e003      	b.n	80005f6 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 80005ee:	88ba      	ldrh	r2, [r7, #4]
 80005f0:	883b      	ldrh	r3, [r7, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 80005f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80005f8:	8aba      	ldrh	r2, [r7, #20]
 80005fa:	88b9      	ldrh	r1, [r7, #4]
 80005fc:	88f8      	ldrh	r0, [r7, #6]
 80005fe:	f000 fe6f 	bl	80012e0 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000602:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000604:	8aba      	ldrh	r2, [r7, #20]
 8000606:	88b9      	ldrh	r1, [r7, #4]
 8000608:	8878      	ldrh	r0, [r7, #2]
 800060a:	f000 fe69 	bl	80012e0 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000614:	8abb      	ldrh	r3, [r7, #20]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 800061a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800061c:	8839      	ldrh	r1, [r7, #0]
 800061e:	887b      	ldrh	r3, [r7, #2]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fce9 	bl	8000ff8 <ILI9341_Draw_Pixel>
	}
	
}
 8000626:	bf00      	nop
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd90      	pop	{r4, r7, pc}

0800062e <ILI9341_Draw_Filled_Rectangle_Coord>:
/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b089      	sub	sp, #36	; 0x24
 8000632:	af02      	add	r7, sp, #8
 8000634:	4604      	mov	r4, r0
 8000636:	4608      	mov	r0, r1
 8000638:	4611      	mov	r1, r2
 800063a:	461a      	mov	r2, r3
 800063c:	4623      	mov	r3, r4
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	4603      	mov	r3, r0
 8000642:	80bb      	strh	r3, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	807b      	strh	r3, [r7, #2]
 8000648:	4613      	mov	r3, r2
 800064a:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8000668:	887a      	ldrh	r2, [r7, #2]
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b00      	cmp	r3, #0
 8000674:	da01      	bge.n	800067a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8000676:	2301      	movs	r3, #1
 8000678:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800067e:	883a      	ldrh	r2, [r7, #0]
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	da01      	bge.n	8000690 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 800068c:	2301      	movs	r3, #1
 800068e:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000690:	7cfb      	ldrb	r3, [r7, #19]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d106      	bne.n	80006a4 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8000696:	887a      	ldrh	r2, [r7, #2]
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	823b      	strh	r3, [r7, #16]
 80006a2:	e005      	b.n	80006b0 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	887b      	ldrh	r3, [r7, #2]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80006b0:	7cbb      	ldrb	r3, [r7, #18]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d106      	bne.n	80006c4 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80006b6:	883a      	ldrh	r2, [r7, #0]
 80006b8:	88bb      	ldrh	r3, [r7, #4]
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80006be:	88bb      	ldrh	r3, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
 80006c2:	e005      	b.n	80006d0 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80006c4:	88ba      	ldrh	r2, [r7, #4]
 80006c6:	883b      	ldrh	r3, [r7, #0]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80006cc:	883b      	ldrh	r3, [r7, #0]
 80006ce:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80006d0:	8abc      	ldrh	r4, [r7, #20]
 80006d2:	8afa      	ldrh	r2, [r7, #22]
 80006d4:	89f9      	ldrh	r1, [r7, #14]
 80006d6:	8a38      	ldrh	r0, [r7, #16]
 80006d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	4623      	mov	r3, r4
 80006de:	f000 fd5f 	bl	80011a0 <ILI9341_Draw_Rectangle>
}
 80006e2:	bf00      	nop
 80006e4:	371c      	adds	r7, #28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd90      	pop	{r4, r7, pc}

080006ea <ILI9341_DrawText>:
/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/


void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b08a      	sub	sp, #40	; 0x28
 80006ee:	af02      	add	r7, sp, #8
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	4611      	mov	r1, r2
 80006f6:	461a      	mov	r2, r3
 80006f8:	460b      	mov	r3, r1
 80006fa:	80fb      	strh	r3, [r7, #6]
 80006fc:	4613      	mov	r3, r2
 80006fe:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1]*2;	/* Width of font */
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000710:	e02d      	b.n	800076e <ILI9341_DrawText+0x84>
	{
		ILI9341_DrawChar(*str, font, X, Y, Colour, Background_Colour);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	7818      	ldrb	r0, [r3, #0]
 8000716:	88b9      	ldrh	r1, [r7, #4]
 8000718:	88fa      	ldrh	r2, [r7, #6]
 800071a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	460b      	mov	r3, r1
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	f000 f82b 	bl	8000780 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	3b20      	subs	r3, #32
 8000730:	7ffa      	ldrb	r2, [r7, #31]
 8000732:	fb02 f303 	mul.w	r3, r2, r3
 8000736:	3304      	adds	r3, #4
 8000738:	68ba      	ldr	r2, [r7, #8]
 800073a:	4413      	add	r3, r2
 800073c:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	1c9a      	adds	r2, r3, #2
 8000748:	7fbb      	ldrb	r3, [r7, #30]
 800074a:	429a      	cmp	r2, r3
 800074c:	da07      	bge.n	800075e <ILI9341_DrawText+0x74>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	b29a      	uxth	r2, r3
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	4413      	add	r3, r2
 8000756:	b29b      	uxth	r3, r3
 8000758:	3302      	adds	r3, #2
 800075a:	80fb      	strh	r3, [r7, #6]
 800075c:	e004      	b.n	8000768 <ILI9341_DrawText+0x7e>
		}
		else
		{
			X += fWidth;
 800075e:	7fbb      	ldrb	r3, [r7, #30]
 8000760:	b29a      	uxth	r2, r3
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	4413      	add	r3, r2
 8000766:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3301      	adds	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1cd      	bne.n	8000712 <ILI9341_DrawText+0x28>
	}
}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <ILI9341_DrawChar>:
void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Background_Colour)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b08d      	sub	sp, #52	; 0x34
 8000784:	af02      	add	r7, sp, #8
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	4611      	mov	r1, r2
 800078a:	461a      	mov	r2, r3
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	460b      	mov	r3, r1
 8000792:	81bb      	strh	r3, [r7, #12]
 8000794:	4613      	mov	r3, r2
 8000796:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b1e      	cmp	r3, #30
 800079c:	d967      	bls.n	800086e <ILI9341_DrawChar+0xee>
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	db63      	blt.n	800086e <ILI9341_DrawChar+0xee>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1]*2;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2]*2;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3302      	adds	r3, #2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	78db      	ldrb	r3, [r3, #3]
 80007c4:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	3b20      	subs	r3, #32
 80007ca:	7ffa      	ldrb	r2, [r7, #31]
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	3304      	adds	r3, #4
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	4413      	add	r3, r2
 80007d6:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_Draw_Rectangle(X, Y, fWidth+4, fHeight, Background_Colour);
 80007d8:	7fbb      	ldrb	r3, [r7, #30]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	3304      	adds	r3, #4
 80007de:	b29a      	uxth	r2, r3
 80007e0:	7f7b      	ldrb	r3, [r7, #29]
 80007e2:	b29c      	uxth	r4, r3
 80007e4:	88f9      	ldrh	r1, [r7, #6]
 80007e6:	89b8      	ldrh	r0, [r7, #12]
 80007e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4623      	mov	r3, r4
 80007ee:	f000 fcd7 	bl	80011a0 <ILI9341_Draw_Rectangle>

	for (int j=0; j < fHeight; j++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
 80007f6:	e035      	b.n	8000864 <ILI9341_DrawChar+0xe4>
	{
		for (int i=0; i < fWidth; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
 80007fc:	e02b      	b.n	8000856 <ILI9341_DrawChar+0xd6>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80007fe:	7f3b      	ldrb	r3, [r7, #28]
 8000800:	6a3a      	ldr	r2, [r7, #32]
 8000802:	fb02 f203 	mul.w	r2, r2, r3
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	10db      	asrs	r3, r3, #3
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	4413      	add	r3, r2
 8000810:	3301      	adds	r3, #1
 8000812:	69ba      	ldr	r2, [r7, #24]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	2201      	movs	r2, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000828:	7dfa      	ldrb	r2, [r7, #23]
 800082a:	7dbb      	ldrb	r3, [r7, #22]
 800082c:	4013      	ands	r3, r2
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00d      	beq.n	8000850 <ILI9341_DrawChar+0xd0>
			{
				ILI9341_Draw_Pixel(X+i, Y+j, Colour);
 8000834:	6a3b      	ldr	r3, [r7, #32]
 8000836:	b29a      	uxth	r2, r3
 8000838:	89bb      	ldrh	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	b298      	uxth	r0, r3
 800083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000840:	b29a      	uxth	r2, r3
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	4413      	add	r3, r2
 8000846:	b29b      	uxth	r3, r3
 8000848:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800084a:	4619      	mov	r1, r3
 800084c:	f000 fbd4 	bl	8000ff8 <ILI9341_Draw_Pixel>
		for (int i=0; i < fWidth; i++)
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	3301      	adds	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
 8000856:	7fbb      	ldrb	r3, [r7, #30]
 8000858:	6a3a      	ldr	r2, [r7, #32]
 800085a:	429a      	cmp	r2, r3
 800085c:	dbcf      	blt.n	80007fe <ILI9341_DrawChar+0x7e>
	for (int j=0; j < fHeight; j++)
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	3301      	adds	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
 8000864:	7f7b      	ldrb	r3, [r7, #29]
 8000866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000868:	429a      	cmp	r2, r3
 800086a:	dbc5      	blt.n	80007f8 <ILI9341_DrawChar+0x78>
 800086c:	e000      	b.n	8000870 <ILI9341_DrawChar+0xf0>
	if ((ch < 31) || (ch > 127)) return;
 800086e:	bf00      	nop
			}
		}
	}
}
 8000870:	372c      	adds	r7, #44	; 0x2c
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}
	...

08000878 <ILI9341_Draw_Char>:
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af02      	add	r7, sp, #8
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	4603      	mov	r3, r0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	717b      	strb	r3, [r7, #5]
 8000892:	4613      	mov	r3, r2
 8000894:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	2b1f      	cmp	r3, #31
 800089e:	d802      	bhi.n	80008a6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	e002      	b.n	80008ac <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	3b20      	subs	r3, #32
 80008aa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	753b      	strb	r3, [r7, #20]
 80008b0:	e012      	b.n	80008d8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80008b2:	7dfa      	ldrb	r2, [r7, #23]
 80008b4:	7d38      	ldrb	r0, [r7, #20]
 80008b6:	7d39      	ldrb	r1, [r7, #20]
 80008b8:	4c3c      	ldr	r4, [pc, #240]	; (80009ac <ILI9341_Draw_Char+0x134>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4423      	add	r3, r4
 80008c4:	4403      	add	r3, r0
 80008c6:	781a      	ldrb	r2, [r3, #0]
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	440b      	add	r3, r1
 80008ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80008d2:	7d3b      	ldrb	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	753b      	strb	r3, [r7, #20]
 80008d8:	7d3b      	ldrb	r3, [r7, #20]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d9e9      	bls.n	80008b2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	b298      	uxth	r0, r3
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	b299      	uxth	r1, r3
 80008e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008e8:	461a      	mov	r2, r3
 80008ea:	0052      	lsls	r2, r2, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	b29c      	uxth	r4, r3
 80008f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	4623      	mov	r3, r4
 80008fe:	f000 fc4f 	bl	80011a0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000902:	2300      	movs	r3, #0
 8000904:	757b      	strb	r3, [r7, #21]
 8000906:	e048      	b.n	800099a <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	75bb      	strb	r3, [r7, #22]
 800090c:	e03f      	b.n	800098e <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 800090e:	7d7b      	ldrb	r3, [r7, #21]
 8000910:	f107 0218 	add.w	r2, r7, #24
 8000914:	4413      	add	r3, r2
 8000916:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800091a:	461a      	mov	r2, r3
 800091c:	7dbb      	ldrb	r3, [r7, #22]
 800091e:	fa42 f303 	asr.w	r3, r2, r3
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d02e      	beq.n	8000988 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 800092a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800092c:	2b01      	cmp	r3, #1
 800092e:	d110      	bne.n	8000952 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	b29a      	uxth	r2, r3
 8000934:	7d7b      	ldrb	r3, [r7, #21]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4413      	add	r3, r2
 800093a:	b298      	uxth	r0, r3
 800093c:	797b      	ldrb	r3, [r7, #5]
 800093e:	b29a      	uxth	r2, r3
 8000940:	7dbb      	ldrb	r3, [r7, #22]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	887a      	ldrh	r2, [r7, #2]
 800094a:	4619      	mov	r1, r3
 800094c:	f000 fb54 	bl	8000ff8 <ILI9341_Draw_Pixel>
 8000950:	e01a      	b.n	8000988 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	b29a      	uxth	r2, r3
 8000956:	7d7b      	ldrb	r3, [r7, #21]
 8000958:	b29b      	uxth	r3, r3
 800095a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800095c:	fb01 f303 	mul.w	r3, r1, r3
 8000960:	b29b      	uxth	r3, r3
 8000962:	4413      	add	r3, r2
 8000964:	b298      	uxth	r0, r3
 8000966:	797b      	ldrb	r3, [r7, #5]
 8000968:	b29a      	uxth	r2, r3
 800096a:	7dbb      	ldrb	r3, [r7, #22]
 800096c:	b29b      	uxth	r3, r3
 800096e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000970:	fb01 f303 	mul.w	r3, r1, r3
 8000974:	b29b      	uxth	r3, r3
 8000976:	4413      	add	r3, r2
 8000978:	b299      	uxth	r1, r3
 800097a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800097c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	4623      	mov	r3, r4
 8000984:	f000 fc0c 	bl	80011a0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000988:	7dbb      	ldrb	r3, [r7, #22]
 800098a:	3301      	adds	r3, #1
 800098c:	75bb      	strb	r3, [r7, #22]
 800098e:	7dbb      	ldrb	r3, [r7, #22]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d9bc      	bls.n	800090e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000994:	7d7b      	ldrb	r3, [r7, #21]
 8000996:	3301      	adds	r3, #1
 8000998:	757b      	strb	r3, [r7, #21]
 800099a:	7d7b      	ldrb	r3, [r7, #21]
 800099c:	2b05      	cmp	r3, #5
 800099e:	d9b3      	bls.n	8000908 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	371c      	adds	r7, #28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08005750 	.word	0x08005750

080009b0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	70fb      	strb	r3, [r7, #3]
 80009c2:	460b      	mov	r3, r1
 80009c4:	70bb      	strb	r3, [r7, #2]
 80009c6:	4613      	mov	r3, r2
 80009c8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80009ca:	e017      	b.n	80009fc <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	7818      	ldrb	r0, [r3, #0]
 80009d4:	883c      	ldrh	r4, [r7, #0]
 80009d6:	78ba      	ldrb	r2, [r7, #2]
 80009d8:	78f9      	ldrb	r1, [r7, #3]
 80009da:	8bbb      	ldrh	r3, [r7, #28]
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	8b3b      	ldrh	r3, [r7, #24]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4623      	mov	r3, r4
 80009e4:	f7ff ff48 	bl	8000878 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80009e8:	8b3b      	ldrh	r3, [r7, #24]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	461a      	mov	r2, r3
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	78fb      	ldrb	r3, [r7, #3]
 80009f8:	4413      	add	r3, r2
 80009fa:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1e3      	bne.n	80009cc <ILI9341_Draw_Text+0x1c>
    }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
	...

08000a10 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
MX_SPI2_Init();																							//SPI INIT
 8000a14:	f001 f868 	bl	8001ae8 <MX_SPI2_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000a18:	f000 fd20 	bl	800145c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4802      	ldr	r0, [pc, #8]	; (8000a2c <ILI9341_SPI_Init+0x1c>)
 8000a24:	f002 f9be 	bl	8002da4 <HAL_GPIO_WritePin>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40010c00 	.word	0x40010c00

08000a30 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <ILI9341_SPI_Send+0x20>)
 8000a42:	f003 fd57 	bl	80044f4 <HAL_SPI_Transmit>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000134 	.word	0x20000134

08000a54 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a64:	480a      	ldr	r0, [pc, #40]	; (8000a90 <ILI9341_Write_Command+0x3c>)
 8000a66:	f002 f99d 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4808      	ldr	r0, [pc, #32]	; (8000a90 <ILI9341_Write_Command+0x3c>)
 8000a70:	f002 f998 	bl	8002da4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffda 	bl	8000a30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <ILI9341_Write_Command+0x3c>)
 8000a84:	f002 f98e 	bl	8002da4 <HAL_GPIO_WritePin>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010c00 	.word	0x40010c00

08000a94 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <ILI9341_Write_Data+0x3c>)
 8000aa4:	f002 f97e 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <ILI9341_Write_Data+0x3c>)
 8000ab0:	f002 f978 	bl	8002da4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffba 	bl	8000a30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <ILI9341_Write_Data+0x3c>)
 8000ac4:	f002 f96e 	bl	8002da4 <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4604      	mov	r4, r0
 8000adc:	4608      	mov	r0, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4623      	mov	r3, r4
 8000ae4:	80fb      	strh	r3, [r7, #6]
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80bb      	strh	r3, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	807b      	strh	r3, [r7, #2]
 8000aee:	4613      	mov	r3, r2
 8000af0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000af2:	202a      	movs	r0, #42	; 0x2a
 8000af4:	f7ff ffae 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ffc7 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ffc2 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffbb 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ffb6 	bl	8000a94 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000b28:	202b      	movs	r0, #43	; 0x2b
 8000b2a:	f7ff ff93 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ffac 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffa7 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000b46:	883b      	ldrh	r3, [r7, #0]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffa0 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000b54:	883b      	ldrh	r3, [r7, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff9b 	bl	8000a94 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000b5e:	202c      	movs	r0, #44	; 0x2c
 8000b60:	f7ff ff78 	bl	8000a54 <ILI9341_Write_Command>
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd90      	pop	{r4, r7, pc}

08000b6c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <ILI9341_Reset+0x34>)
 8000b76:	f002 f915 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b7a:	20c8      	movs	r0, #200	; 0xc8
 8000b7c:	f001 f9b8 	bl	8001ef0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <ILI9341_Reset+0x34>)
 8000b88:	f002 f90c 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000b8c:	20c8      	movs	r0, #200	; 0xc8
 8000b8e:	f001 f9af 	bl	8001ef0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000b92:	2201      	movs	r2, #1
 8000b94:	2101      	movs	r1, #1
 8000b96:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <ILI9341_Reset+0x34>)
 8000b98:	f002 f904 	bl	8002da4 <HAL_GPIO_WritePin>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000bb2:	2036      	movs	r0, #54	; 0x36
 8000bb4:	f7ff ff4e 	bl	8000a54 <ILI9341_Write_Command>
HAL_Delay(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f001 f999 	bl	8001ef0 <HAL_Delay>
	
switch(screen_rotation) 
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d837      	bhi.n	8000c34 <ILI9341_Set_Rotation+0x90>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <ILI9341_Set_Rotation+0x28>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000bf3 	.word	0x08000bf3
 8000bd4:	08000c09 	.word	0x08000c09
 8000bd8:	08000c1f 	.word	0x08000c1f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000bdc:	2048      	movs	r0, #72	; 0x48
 8000bde:	f7ff ff59 	bl	8000a94 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <ILI9341_Set_Rotation+0x9c>)
 8000be4:	22f0      	movs	r2, #240	; 0xf0
 8000be6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <ILI9341_Set_Rotation+0xa0>)
 8000bea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bee:	801a      	strh	r2, [r3, #0]
			break;
 8000bf0:	e021      	b.n	8000c36 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f7ff ff4e 	bl	8000a94 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <ILI9341_Set_Rotation+0x9c>)
 8000bfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bfe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <ILI9341_Set_Rotation+0xa0>)
 8000c02:	22f0      	movs	r2, #240	; 0xf0
 8000c04:	801a      	strh	r2, [r3, #0]
			break;
 8000c06:	e016      	b.n	8000c36 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000c08:	2088      	movs	r0, #136	; 0x88
 8000c0a:	f7ff ff43 	bl	8000a94 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <ILI9341_Set_Rotation+0x9c>)
 8000c10:	22f0      	movs	r2, #240	; 0xf0
 8000c12:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <ILI9341_Set_Rotation+0xa0>)
 8000c16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1a:	801a      	strh	r2, [r3, #0]
			break;
 8000c1c:	e00b      	b.n	8000c36 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000c1e:	20e8      	movs	r0, #232	; 0xe8
 8000c20:	f7ff ff38 	bl	8000a94 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <ILI9341_Set_Rotation+0x9c>)
 8000c26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <ILI9341_Set_Rotation+0xa0>)
 8000c2e:	22f0      	movs	r2, #240	; 0xf0
 8000c30:	801a      	strh	r2, [r3, #0]
			break;
 8000c32:	e000      	b.n	8000c36 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000c34:	bf00      	nop
	}
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000002 	.word	0x20000002
 8000c44:	20000000 	.word	0x20000000

08000c48 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2101      	movs	r1, #1
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <ILI9341_Enable+0x14>)
 8000c52:	f002 f8a7 	bl	8002da4 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000c64:	f7ff fff0 	bl	8000c48 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000c68:	f7ff fed2 	bl	8000a10 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000c6c:	f7ff ff7e 	bl	8000b6c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff feef 	bl	8000a54 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000c76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7a:	f001 f939 	bl	8001ef0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000c7e:	20cb      	movs	r0, #203	; 0xcb
 8000c80:	f7ff fee8 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000c84:	2039      	movs	r0, #57	; 0x39
 8000c86:	f7ff ff05 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000c8a:	202c      	movs	r0, #44	; 0x2c
 8000c8c:	f7ff ff02 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff feff 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000c96:	2034      	movs	r0, #52	; 0x34
 8000c98:	f7ff fefc 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f7ff fef9 	bl	8000a94 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000ca2:	20cf      	movs	r0, #207	; 0xcf
 8000ca4:	f7ff fed6 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fef3 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000cae:	20c1      	movs	r0, #193	; 0xc1
 8000cb0:	f7ff fef0 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000cb4:	2030      	movs	r0, #48	; 0x30
 8000cb6:	f7ff feed 	bl	8000a94 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000cba:	20e8      	movs	r0, #232	; 0xe8
 8000cbc:	f7ff feca 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000cc0:	2085      	movs	r0, #133	; 0x85
 8000cc2:	f7ff fee7 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fee4 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f7ff fee1 	bl	8000a94 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000cd2:	20ea      	movs	r0, #234	; 0xea
 8000cd4:	f7ff febe 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fedb 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fed8 	bl	8000a94 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000ce4:	20ed      	movs	r0, #237	; 0xed
 8000ce6:	f7ff feb5 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f7ff fed2 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f7ff fecf 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000cf6:	2012      	movs	r0, #18
 8000cf8:	f7ff fecc 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000cfc:	2081      	movs	r0, #129	; 0x81
 8000cfe:	f7ff fec9 	bl	8000a94 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000d02:	20f7      	movs	r0, #247	; 0xf7
 8000d04:	f7ff fea6 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000d08:	2020      	movs	r0, #32
 8000d0a:	f7ff fec3 	bl	8000a94 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000d0e:	20c0      	movs	r0, #192	; 0xc0
 8000d10:	f7ff fea0 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000d14:	2023      	movs	r0, #35	; 0x23
 8000d16:	f7ff febd 	bl	8000a94 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000d1a:	20c1      	movs	r0, #193	; 0xc1
 8000d1c:	f7ff fe9a 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000d20:	2010      	movs	r0, #16
 8000d22:	f7ff feb7 	bl	8000a94 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000d26:	20c5      	movs	r0, #197	; 0xc5
 8000d28:	f7ff fe94 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000d2c:	203e      	movs	r0, #62	; 0x3e
 8000d2e:	f7ff feb1 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000d32:	2028      	movs	r0, #40	; 0x28
 8000d34:	f7ff feae 	bl	8000a94 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000d38:	20c7      	movs	r0, #199	; 0xc7
 8000d3a:	f7ff fe8b 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000d3e:	2086      	movs	r0, #134	; 0x86
 8000d40:	f7ff fea8 	bl	8000a94 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000d44:	2036      	movs	r0, #54	; 0x36
 8000d46:	f7ff fe85 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000d4a:	2048      	movs	r0, #72	; 0x48
 8000d4c:	f7ff fea2 	bl	8000a94 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000d50:	203a      	movs	r0, #58	; 0x3a
 8000d52:	f7ff fe7f 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000d56:	2055      	movs	r0, #85	; 0x55
 8000d58:	f7ff fe9c 	bl	8000a94 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000d5c:	20b1      	movs	r0, #177	; 0xb1
 8000d5e:	f7ff fe79 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe96 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000d68:	2018      	movs	r0, #24
 8000d6a:	f7ff fe93 	bl	8000a94 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000d6e:	20b6      	movs	r0, #182	; 0xb6
 8000d70:	f7ff fe70 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000d74:	2008      	movs	r0, #8
 8000d76:	f7ff fe8d 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000d7a:	2082      	movs	r0, #130	; 0x82
 8000d7c:	f7ff fe8a 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000d80:	2027      	movs	r0, #39	; 0x27
 8000d82:	f7ff fe87 	bl	8000a94 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000d86:	20f2      	movs	r0, #242	; 0xf2
 8000d88:	f7ff fe64 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fe81 	bl	8000a94 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000d92:	2026      	movs	r0, #38	; 0x26
 8000d94:	f7ff fe5e 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fe7b 	bl	8000a94 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000d9e:	20e0      	movs	r0, #224	; 0xe0
 8000da0:	f7ff fe58 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000da4:	200f      	movs	r0, #15
 8000da6:	f7ff fe75 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000daa:	2031      	movs	r0, #49	; 0x31
 8000dac:	f7ff fe72 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000db0:	202b      	movs	r0, #43	; 0x2b
 8000db2:	f7ff fe6f 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000db6:	200c      	movs	r0, #12
 8000db8:	f7ff fe6c 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000dbc:	200e      	movs	r0, #14
 8000dbe:	f7ff fe69 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000dc2:	2008      	movs	r0, #8
 8000dc4:	f7ff fe66 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000dc8:	204e      	movs	r0, #78	; 0x4e
 8000dca:	f7ff fe63 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000dce:	20f1      	movs	r0, #241	; 0xf1
 8000dd0:	f7ff fe60 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000dd4:	2037      	movs	r0, #55	; 0x37
 8000dd6:	f7ff fe5d 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f7ff fe5a 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000de0:	2010      	movs	r0, #16
 8000de2:	f7ff fe57 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f7ff fe54 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000dec:	200e      	movs	r0, #14
 8000dee:	f7ff fe51 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000df2:	2009      	movs	r0, #9
 8000df4:	f7ff fe4e 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fe4b 	bl	8000a94 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000dfe:	20e1      	movs	r0, #225	; 0xe1
 8000e00:	f7ff fe28 	bl	8000a54 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fe45 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000e0a:	200e      	movs	r0, #14
 8000e0c:	f7ff fe42 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000e10:	2014      	movs	r0, #20
 8000e12:	f7ff fe3f 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f7ff fe3c 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000e1c:	2011      	movs	r0, #17
 8000e1e:	f7ff fe39 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f7ff fe36 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000e28:	2031      	movs	r0, #49	; 0x31
 8000e2a:	f7ff fe33 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000e2e:	20c1      	movs	r0, #193	; 0xc1
 8000e30:	f7ff fe30 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000e34:	2048      	movs	r0, #72	; 0x48
 8000e36:	f7ff fe2d 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f7ff fe2a 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000e40:	200f      	movs	r0, #15
 8000e42:	f7ff fe27 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000e46:	200c      	movs	r0, #12
 8000e48:	f7ff fe24 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000e4c:	2031      	movs	r0, #49	; 0x31
 8000e4e:	f7ff fe21 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000e52:	2036      	movs	r0, #54	; 0x36
 8000e54:	f7ff fe1e 	bl	8000a94 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000e58:	200f      	movs	r0, #15
 8000e5a:	f7ff fe1b 	bl	8000a94 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000e5e:	2011      	movs	r0, #17
 8000e60:	f7ff fdf8 	bl	8000a54 <ILI9341_Write_Command>
HAL_Delay(120);
 8000e64:	2078      	movs	r0, #120	; 0x78
 8000e66:	f001 f843 	bl	8001ef0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000e6a:	2029      	movs	r0, #41	; 0x29
 8000e6c:	f7ff fdf2 	bl	8000a54 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000e70:	2000      	movs	r0, #0
 8000e72:	f7ff fe97 	bl	8000ba4 <ILI9341_Set_Rotation>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000e7c:	b5b0      	push	{r4, r5, r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	80fb      	strh	r3, [r7, #6]
 8000e88:	466b      	mov	r3, sp
 8000e8a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e98:	d202      	bcs.n	8000ea0 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9e:	e002      	b.n	8000ea6 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000ea0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	483e      	ldr	r0, [pc, #248]	; (8000fa4 <ILI9341_Draw_Colour_Burst+0x128>)
 8000eac:	f001 ff7a 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb6:	483b      	ldr	r0, [pc, #236]	; (8000fa4 <ILI9341_Draw_Colour_Burst+0x128>)
 8000eb8:	f001 ff74 	bl	8002da4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000ec6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000ec8:	4623      	mov	r3, r4
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f04f 0100 	mov.w	r1, #0
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	00cb      	lsls	r3, r1, #3
 8000ede:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ee2:	00c2      	lsls	r2, r0, #3
 8000ee4:	4620      	mov	r0, r4
 8000ee6:	f04f 0100 	mov.w	r1, #0
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	00cb      	lsls	r3, r1, #3
 8000ef4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ef8:	00c2      	lsls	r2, r0, #3
 8000efa:	1de3      	adds	r3, r4, #7
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	ebad 0d03 	sub.w	sp, sp, r3
 8000f04:	466b      	mov	r3, sp
 8000f06:	3300      	adds	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f0e:	e00e      	b.n	8000f2e <ILI9341_Draw_Colour_Burst+0xb2>
	{
		burst_buffer[j] = 	chifted;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f14:	4413      	add	r3, r2
 8000f16:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f1a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	3301      	adds	r3, #1
 8000f20:	88fa      	ldrh	r2, [r7, #6]
 8000f22:	b2d1      	uxtb	r1, r2
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3ec      	bcc.n	8000f10 <ILI9341_Draw_Colour_Burst+0x94>
	}

uint32_t Sending_Size = Size*2;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f50:	fb01 f202 	mul.w	r2, r1, r2
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <ILI9341_Draw_Colour_Burst+0x104>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f62:	e009      	b.n	8000f78 <ILI9341_Draw_Colour_Burst+0xfc>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000f64:	69b9      	ldr	r1, [r7, #24]
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	480e      	ldr	r0, [pc, #56]	; (8000fa8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000f6e:	f003 fac1 	bl	80044f4 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f74:	3301      	adds	r3, #1
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3f1      	bcc.n	8000f64 <ILI9341_Draw_Colour_Burst+0xe8>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000f80:	69b9      	ldr	r1, [r7, #24]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	230a      	movs	r3, #10
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000f8a:	f003 fab3 	bl	80044f4 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <ILI9341_Draw_Colour_Burst+0x128>)
 8000f96:	f001 ff05 	bl	8002da4 <HAL_GPIO_WritePin>
 8000f9a:	46ad      	mov	sp, r5
}
 8000f9c:	bf00      	nop
 8000f9e:	3730      	adds	r7, #48	; 0x30
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	20000134 	.word	0x20000134

08000fac <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <ILI9341_Fill_Screen+0x44>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <ILI9341_Fill_Screen+0x48>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fd85 	bl	8000ad4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <ILI9341_Fill_Screen+0x44>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <ILI9341_Fill_Screen+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	fb03 f302 	mul.w	r3, r3, r2
 8000fdc:	461a      	mov	r2, r3
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff4a 	bl	8000e7c <ILI9341_Draw_Colour_Burst>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000002 	.word	0x20000002
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	460b      	mov	r3, r1
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800100a:	4b61      	ldr	r3, [pc, #388]	; (8001190 <ILI9341_Draw_Pixel+0x198>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	429a      	cmp	r2, r3
 8001014:	f080 80b8 	bcs.w	8001188 <ILI9341_Draw_Pixel+0x190>
 8001018:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <ILI9341_Draw_Pixel+0x19c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	88ba      	ldrh	r2, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	f080 80b1 	bcs.w	8001188 <ILI9341_Draw_Pixel+0x190>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001026:	2200      	movs	r2, #0
 8001028:	2104      	movs	r1, #4
 800102a:	485b      	ldr	r0, [pc, #364]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 800102c:	f001 feba 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001036:	4858      	ldr	r0, [pc, #352]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001038:	f001 feb4 	bl	8002da4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800103c:	202a      	movs	r0, #42	; 0x2a
 800103e:	f7ff fcf7 	bl	8000a30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001042:	2201      	movs	r2, #1
 8001044:	2104      	movs	r1, #4
 8001046:	4854      	ldr	r0, [pc, #336]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001048:	f001 feac 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001052:	4851      	ldr	r0, [pc, #324]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001054:	f001 fea6 	bl	8002da4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	484e      	ldr	r0, [pc, #312]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001060:	f001 fea0 	bl	8002da4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	753b      	strb	r3, [r7, #20]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	757b      	strb	r3, [r7, #21]
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	3301      	adds	r3, #1
 8001078:	121b      	asrs	r3, r3, #8
 800107a:	b2db      	uxtb	r3, r3
 800107c:	75bb      	strb	r3, [r7, #22]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8001088:	f107 0114 	add.w	r1, r7, #20
 800108c:	2301      	movs	r3, #1
 800108e:	2204      	movs	r2, #4
 8001090:	4842      	ldr	r0, [pc, #264]	; (800119c <ILI9341_Draw_Pixel+0x1a4>)
 8001092:	f003 fa2f 	bl	80044f4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	483e      	ldr	r0, [pc, #248]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 800109e:	f001 fe81 	bl	8002da4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80010a2:	2200      	movs	r2, #0
 80010a4:	2104      	movs	r1, #4
 80010a6:	483c      	ldr	r0, [pc, #240]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 80010a8:	f001 fe7c 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	4839      	ldr	r0, [pc, #228]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 80010b4:	f001 fe76 	bl	8002da4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80010b8:	202b      	movs	r0, #43	; 0x2b
 80010ba:	f7ff fcb9 	bl	8000a30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80010be:	2201      	movs	r2, #1
 80010c0:	2104      	movs	r1, #4
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 80010c4:	f001 fe6e 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ce:	4832      	ldr	r0, [pc, #200]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 80010d0:	f001 fe68 	bl	8002da4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 80010dc:	f001 fe62 	bl	8002da4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80010e0:	88bb      	ldrh	r3, [r7, #4]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	743b      	strb	r3, [r7, #16]
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	747b      	strb	r3, [r7, #17]
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	121b      	asrs	r3, r3, #8
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	74bb      	strb	r3, [r7, #18]
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	3301      	adds	r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001104:	f107 0110 	add.w	r1, r7, #16
 8001108:	2301      	movs	r3, #1
 800110a:	2204      	movs	r2, #4
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <ILI9341_Draw_Pixel+0x1a4>)
 800110e:	f003 f9f1 	bl	80044f4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001118:	481f      	ldr	r0, [pc, #124]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 800111a:	f001 fe43 	bl	8002da4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800111e:	2200      	movs	r2, #0
 8001120:	2104      	movs	r1, #4
 8001122:	481d      	ldr	r0, [pc, #116]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001124:	f001 fe3e 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	481a      	ldr	r0, [pc, #104]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001130:	f001 fe38 	bl	8002da4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001134:	202c      	movs	r0, #44	; 0x2c
 8001136:	f7ff fc7b 	bl	8000a30 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800113a:	2201      	movs	r2, #1
 800113c:	2104      	movs	r1, #4
 800113e:	4816      	ldr	r0, [pc, #88]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001140:	f001 fe30 	bl	8002da4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 800114c:	f001 fe2a 	bl	8002da4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001158:	f001 fe24 	bl	8002da4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	b29b      	uxth	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	733b      	strb	r3, [r7, #12]
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	2301      	movs	r3, #1
 8001172:	2202      	movs	r2, #2
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <ILI9341_Draw_Pixel+0x1a4>)
 8001176:	f003 f9bd 	bl	80044f4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <ILI9341_Draw_Pixel+0x1a0>)
 8001182:	f001 fe0f 	bl	8002da4 <HAL_GPIO_WritePin>
 8001186:	e000      	b.n	800118a <ILI9341_Draw_Pixel+0x192>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001188:	bf00      	nop
	
}
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000002 	.word	0x20000002
 8001194:	20000000 	.word	0x20000000
 8001198:	40010c00 	.word	0x40010c00
 800119c:	20000134 	.word	0x20000134

080011a0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	4603      	mov	r3, r0
 80011b4:	80bb      	strh	r3, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	807b      	strh	r3, [r7, #2]
 80011ba:	4613      	mov	r3, r2
 80011bc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <ILI9341_Draw_Rectangle+0xb0>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d23d      	bcs.n	8001246 <ILI9341_Draw_Rectangle+0xa6>
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <ILI9341_Draw_Rectangle+0xb4>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	88ba      	ldrh	r2, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d237      	bcs.n	8001246 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80011d6:	88fa      	ldrh	r2, [r7, #6]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4413      	add	r3, r2
 80011dc:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <ILI9341_Draw_Rectangle+0xb0>)
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	b292      	uxth	r2, r2
 80011e2:	4293      	cmp	r3, r2
 80011e4:	dd05      	ble.n	80011f2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <ILI9341_Draw_Rectangle+0xb0>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80011f2:	88ba      	ldrh	r2, [r7, #4]
 80011f4:	883b      	ldrh	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a16      	ldr	r2, [pc, #88]	; (8001254 <ILI9341_Draw_Rectangle+0xb4>)
 80011fa:	8812      	ldrh	r2, [r2, #0]
 80011fc:	b292      	uxth	r2, r2
 80011fe:	4293      	cmp	r3, r2
 8001200:	dd05      	ble.n	800120e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <ILI9341_Draw_Rectangle+0xb4>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	887b      	ldrh	r3, [r7, #2]
 8001212:	4413      	add	r3, r2
 8001214:	b29b      	uxth	r3, r3
 8001216:	3b01      	subs	r3, #1
 8001218:	b29c      	uxth	r4, r3
 800121a:	88ba      	ldrh	r2, [r7, #4]
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	3b01      	subs	r3, #1
 8001224:	b29b      	uxth	r3, r3
 8001226:	88b9      	ldrh	r1, [r7, #4]
 8001228:	88f8      	ldrh	r0, [r7, #6]
 800122a:	4622      	mov	r2, r4
 800122c:	f7ff fc52 	bl	8000ad4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001230:	883b      	ldrh	r3, [r7, #0]
 8001232:	887a      	ldrh	r2, [r7, #2]
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	461a      	mov	r2, r3
 800123a:	8b3b      	ldrh	r3, [r7, #24]
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fe1c 	bl	8000e7c <ILI9341_Draw_Colour_Burst>
 8001244:	e000      	b.n	8001248 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001246:	bf00      	nop
}
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	20000002 	.word	0x20000002
 8001254:	20000000 	.word	0x20000000

08001258 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4623      	mov	r3, r4
 8001268:	80fb      	strh	r3, [r7, #6]
 800126a:	4603      	mov	r3, r0
 800126c:	80bb      	strh	r3, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	807b      	strh	r3, [r7, #2]
 8001272:	4613      	mov	r3, r2
 8001274:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b29b      	uxth	r3, r3
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	429a      	cmp	r2, r3
 8001280:	d225      	bcs.n	80012ce <ILI9341_Draw_Horizontal_Line+0x76>
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <ILI9341_Draw_Horizontal_Line+0x84>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	88ba      	ldrh	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d21f      	bcs.n	80012ce <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800128e:	88fa      	ldrh	r2, [r7, #6]
 8001290:	887b      	ldrh	r3, [r7, #2]
 8001292:	4413      	add	r3, r2
 8001294:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	b292      	uxth	r2, r2
 800129a:	4293      	cmp	r3, r2
 800129c:	dd05      	ble.n	80012aa <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <ILI9341_Draw_Horizontal_Line+0x80>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4413      	add	r3, r2
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	88b9      	ldrh	r1, [r7, #4]
 80012ba:	88f8      	ldrh	r0, [r7, #6]
 80012bc:	f7ff fc0a 	bl	8000ad4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	883b      	ldrh	r3, [r7, #0]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fdd8 	bl	8000e7c <ILI9341_Draw_Colour_Burst>
 80012cc:	e000      	b.n	80012d0 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012ce:	bf00      	nop
}
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000002 	.word	0x20000002
 80012dc:	20000000 	.word	0x20000000

080012e0 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	4603      	mov	r3, r0
 80012f4:	80bb      	strh	r3, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
 80012fa:	4613      	mov	r3, r2
 80012fc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <ILI9341_Draw_Vertical_Line+0x80>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	88fa      	ldrh	r2, [r7, #6]
 8001306:	429a      	cmp	r2, r3
 8001308:	d225      	bcs.n	8001356 <ILI9341_Draw_Vertical_Line+0x76>
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <ILI9341_Draw_Vertical_Line+0x84>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d21f      	bcs.n	8001356 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001316:	88ba      	ldrh	r2, [r7, #4]
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	4413      	add	r3, r2
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <ILI9341_Draw_Vertical_Line+0x84>)
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	b292      	uxth	r2, r2
 8001322:	4293      	cmp	r3, r2
 8001324:	dd05      	ble.n	8001332 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <ILI9341_Draw_Vertical_Line+0x84>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8001332:	88ba      	ldrh	r2, [r7, #4]
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	3b01      	subs	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	88fa      	ldrh	r2, [r7, #6]
 8001340:	88b9      	ldrh	r1, [r7, #4]
 8001342:	88f8      	ldrh	r0, [r7, #6]
 8001344:	f7ff fbc6 	bl	8000ad4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	883b      	ldrh	r3, [r7, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd94 	bl	8000e7c <ILI9341_Draw_Colour_Burst>
 8001354:	e000      	b.n	8001358 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001356:	bf00      	nop
}
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	20000002 	.word	0x20000002
 8001364:	20000000 	.word	0x20000000

08001368 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_ADC1_Init+0x74>)
 800137a:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <MX_ADC1_Init+0x78>)
 800137c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_ADC1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_ADC1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_ADC1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_ADC1_Init+0x74>)
 8001392:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001396:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_ADC1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_ADC1_Init+0x74>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_ADC1_Init+0x74>)
 80013a6:	f000 fdc7 	bl	8001f38 <HAL_ADC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 fb26 	bl	8001a00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_ADC1_Init+0x74>)
 80013c6:	f001 f855 	bl	8002474 <HAL_ADC_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013d0:	f000 fb16 	bl	8001a00 <Error_Handler>
  }

}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000e8 	.word	0x200000e8
 80013e0:	40012400 	.word	0x40012400

080013e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_ADC_MspInit+0x6c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d121      	bne.n	8001448 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Voltage_Pin;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Voltage_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_ADC_MspInit+0x74>)
 8001444:	f001 fb1a 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012400 	.word	0x40012400
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800

0800145c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b2e      	ldr	r3, [pc, #184]	; (800152c <MX_GPIO_Init+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_GPIO_Init+0xd0>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <MX_GPIO_Init+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_GPIO_Init+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <MX_GPIO_Init+0xd0>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_GPIO_Init+0xd0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0320 	and.w	r3, r3, #32
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_GPIO_Init+0xd0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a21      	ldr	r2, [pc, #132]	; (800152c <MX_GPIO_Init+0xd0>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_GPIO_Init+0xd0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_GPIO_Init+0xd0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <MX_GPIO_Init+0xd0>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_GPIO_Init+0xd0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f241 0105 	movw	r1, #4101	; 0x1005
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <MX_GPIO_Init+0xd4>)
 80014d8:	f001 fc64 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_A_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80014e2:	4814      	ldr	r0, [pc, #80]	; (8001534 <MX_GPIO_Init+0xd8>)
 80014e4:	f001 fc5e 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CS_Pin;
 80014e8:	f241 0305 	movw	r3, #4101	; 0x1005
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480b      	ldr	r0, [pc, #44]	; (8001530 <MX_GPIO_Init+0xd4>)
 8001502:	f001 fabb 	bl	8002a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8001506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2302      	movs	r3, #2
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001520:	f001 faac 	bl	8002a7c <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00
 8001534:	40011000 	.word	0x40011000

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f000 fc75 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f84b 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f7ff ff89 	bl	800145c <MX_GPIO_Init>
  MX_RTC_Init();
 800154a:	f000 fa5f 	bl	8001a0c <MX_RTC_Init>
  MX_TIM1_Init();
 800154e:	f000 fbd9 	bl	8001d04 <MX_TIM1_Init>
  MX_SPI2_Init();
 8001552:	f000 fac9 	bl	8001ae8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001556:	f7ff ff07 	bl	8001368 <MX_ADC1_Init>
  /* Run the ADC calibration */
    if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 800155a:	481d      	ldr	r0, [pc, #116]	; (80015d0 <main+0x98>)
 800155c:	f001 f90e 	bl	800277c <HAL_ADCEx_Calibration_Start>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <main+0x32>
    {
      /* Calibration Error */
      Error_Handler();
 8001566:	f000 fa4b 	bl	8001a00 <Error_Handler>
    }
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800156a:	f7ff fb79 	bl	8000c60 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fd1c 	bl	8000fac <ILI9341_Fill_Screen>
  		//ILI9341_Draw_Image((const char*)lcd_tft, SCREEN_HORIZONTAL_1);
  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001574:	2001      	movs	r0, #1
 8001576:	f7ff fb15 	bl	8000ba4 <ILI9341_Set_Rotation>
  		ILI9341_Draw_Text("20:85", 50, 80, WHITE, 3, BLUE);
 800157a:	231f      	movs	r3, #31
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	2303      	movs	r3, #3
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	2250      	movs	r2, #80	; 0x50
 8001588:	2132      	movs	r1, #50	; 0x32
 800158a:	4812      	ldr	r0, [pc, #72]	; (80015d4 <main+0x9c>)
 800158c:	f7ff fa10 	bl	80009b0 <ILI9341_Draw_Text>
  		ILI9341_DrawText("20:85", BIGFONT, 50, 100, WHITE, BLUE);
 8001590:	231f      	movs	r3, #31
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2364      	movs	r3, #100	; 0x64
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <main+0xa0>)
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <main+0x9c>)
 80015a2:	f7ff f8a2 	bl	80006ea <ILI9341_DrawText>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
clock();
 80015a6:	f000 f9a3 	bl	80018f0 <clock>
checkBattery();
 80015aa:	f000 f8df 	bl	800176c <checkBattery>
ILI9341_Draw_Horizontal_Line(0,24,320,CYAN);
 80015ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015b6:	2118      	movs	r1, #24
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fe4d 	bl	8001258 <ILI9341_Draw_Horizontal_Line>
ILI9341_Draw_Horizontal_Line(0,25,320,CYAN);
 80015be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015c6:	2119      	movs	r1, #25
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fe45 	bl	8001258 <ILI9341_Draw_Horizontal_Line>
clock();
 80015ce:	e7ea      	b.n	80015a6 <main+0x6e>
 80015d0:	200000e8 	.word	0x200000e8
 80015d4:	080056f0 	.word	0x080056f0
 80015d8:	08007438 	.word	0x08007438

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b096      	sub	sp, #88	; 0x58
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e6:	2228      	movs	r2, #40	; 0x28
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fc1e 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001610:	2305      	movs	r3, #5
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800161e:	2301      	movs	r3, #1
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001622:	2301      	movs	r3, #1
 8001624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001626:	2302      	movs	r3, #2
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001630:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001634:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fbd6 	bl	8002dec <HAL_RCC_OscConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001646:	f000 f9db 	bl	8001a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164a:	230f      	movs	r3, #15
 800164c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164e:	2302      	movs	r3, #2
 8001650:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	2102      	movs	r1, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f001 fe40 	bl	80032ec <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001672:	f000 f9c5 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001676:	2303      	movs	r3, #3
 8001678:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800167a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001684:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4618      	mov	r0, r3
 800168a:	f001 ffb5 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001694:	f000 f9b4 	bl	8001a00 <Error_Handler>
  }
}
 8001698:	bf00      	nop
 800169a:	3758      	adds	r7, #88	; 0x58
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <map>:

/* USER CODE BEGIN 4 */
int16_t map (int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 80016a0:	b490      	push	{r4, r7}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4623      	mov	r3, r4
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	4603      	mov	r3, r0
 80016b4:	80bb      	strh	r3, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	807b      	strh	r3, [r7, #2]
 80016ba:	4613      	mov	r3, r2
 80016bc:	803b      	strh	r3, [r7, #0]
  // if input is smaller/bigger than expected return the min/max out ranges value
  if (x < in_min)
 80016be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	da02      	bge.n	80016d0 <map+0x30>
    return out_min;
 80016ca:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016ce:	e047      	b.n	8001760 <map+0xc0>
  else if (x > in_max)
 80016d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd02      	ble.n	80016e2 <map+0x42>
    return out_max;
 80016dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016e0:	e03e      	b.n	8001760 <map+0xc0>

  // map the input to the output range.
  // round up if mapping bigger ranges to smaller ranges
  else  if ((in_max - in_min) > (out_max - out_min))
 80016e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ea:	1ad2      	subs	r2, r2, r3
 80016ec:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80016f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016f4:	1acb      	subs	r3, r1, r3
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dd1a      	ble.n	8001730 <map+0x90>
    return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80016fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001708:	f9b7 2000 	ldrsh.w	r2, [r7]
 800170c:	1a8a      	subs	r2, r1, r2
 800170e:	3201      	adds	r2, #1
 8001710:	fb02 f203 	mul.w	r2, r2, r3
 8001714:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800171c:	1acb      	subs	r3, r1, r3
 800171e:	3301      	adds	r3, #1
 8001720:	fb92 f3f3 	sdiv	r3, r2, r3
 8001724:	b29a      	uxth	r2, r3
 8001726:	883b      	ldrh	r3, [r7, #0]
 8001728:	4413      	add	r3, r2
 800172a:	b29b      	uxth	r3, r3
 800172c:	b21b      	sxth	r3, r3
 800172e:	e017      	b.n	8001760 <map+0xc0>
  // round down if mapping smaller ranges to bigger ranges
  else
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001730:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001734:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800173e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001742:	1a8a      	subs	r2, r1, r2
 8001744:	fb02 f203 	mul.w	r2, r2, r3
 8001748:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800174c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001750:	1acb      	subs	r3, r1, r3
 8001752:	fb92 f3f3 	sdiv	r3, r2, r3
 8001756:	b29a      	uxth	r2, r3
 8001758:	883b      	ldrh	r3, [r7, #0]
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	b21b      	sxth	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bc90      	pop	{r4, r7}
 8001768:	4770      	bx	lr
	...

0800176c <checkBattery>:

void checkBattery()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af02      	add	r7, sp, #8
	HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8001772:	4855      	ldr	r0, [pc, #340]	; (80018c8 <checkBattery+0x15c>)
 8001774:	f000 fcca 	bl	800210c <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 8001778:	2164      	movs	r1, #100	; 0x64
 800177a:	4853      	ldr	r0, [pc, #332]	; (80018c8 <checkBattery+0x15c>)
 800177c:	f000 fd74 	bl	8002268 <HAL_ADC_PollForConversion>
	          adc = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8001780:	4851      	ldr	r0, [pc, #324]	; (80018c8 <checkBattery+0x15c>)
 8001782:	f000 fe6b 	bl	800245c <HAL_ADC_GetValue>
 8001786:	4603      	mov	r3, r0
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b50      	ldr	r3, [pc, #320]	; (80018cc <checkBattery+0x160>)
 800178c:	801a      	strh	r2, [r3, #0]
	          //HAL_ADC_Stop(&hadc1); // останавливаем АЦП
	          j = map(adc, 0, 4096, 256, 290);
 800178e:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <checkBattery+0x160>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	b218      	sxth	r0, r3
 8001794:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a2:	2100      	movs	r1, #0
 80017a4:	f7ff ff7c 	bl	80016a0 <map>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <checkBattery+0x164>)
 80017ae:	801a      	strh	r2, [r3, #0]
	          percent = map(adc, 0, 4096, 0, 100);
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <checkBattery+0x160>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b218      	sxth	r0, r3
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c0:	2100      	movs	r1, #0
 80017c2:	f7ff ff6d 	bl	80016a0 <map>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <checkBattery+0x168>)
 80017cc:	801a      	strh	r2, [r3, #0]
	         if(j<=273 && j>=260){i=ORANGE;};
 80017ce:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <checkBattery+0x164>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80017d6:	d208      	bcs.n	80017ea <checkBattery+0x7e>
 80017d8:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <checkBattery+0x164>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017e0:	d303      	bcc.n	80017ea <checkBattery+0x7e>
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <checkBattery+0x16c>)
 80017e4:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80017e8:	801a      	strh	r2, [r3, #0]
	         if(j>273){i= GREEN;}
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <checkBattery+0x164>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80017f2:	d303      	bcc.n	80017fc <checkBattery+0x90>
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <checkBattery+0x16c>)
 80017f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80017fa:	801a      	strh	r2, [r3, #0]
	         if(j<260){i= RED;}
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <checkBattery+0x164>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001804:	d203      	bcs.n	800180e <checkBattery+0xa2>
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <checkBattery+0x16c>)
 8001808:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800180c:	801a      	strh	r2, [r3, #0]
	snprintf(trans_str, 63, "%d\n", percent);
 800180e:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <checkBattery+0x168>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <checkBattery+0x170>)
 8001814:	213f      	movs	r1, #63	; 0x3f
 8001816:	4832      	ldr	r0, [pc, #200]	; (80018e0 <checkBattery+0x174>)
 8001818:	f003 fb10 	bl	8004e3c <sniprintf>
	ILI9341_Draw_Hollow_Rectangle_Coord(252, 4, 291, 18, WHITE);
 800181c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2312      	movs	r3, #18
 8001824:	f240 1223 	movw	r2, #291	; 0x123
 8001828:	2104      	movs	r1, #4
 800182a:	20fc      	movs	r0, #252	; 0xfc
 800182c:	f7fe fe7e 	bl	800052c <ILI9341_Draw_Hollow_Rectangle_Coord>
			ILI9341_Draw_Hollow_Rectangle_Coord(253, 5, 290, 17, WHITE);
 8001830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2311      	movs	r3, #17
 8001838:	f44f 7291 	mov.w	r2, #290	; 0x122
 800183c:	2105      	movs	r1, #5
 800183e:	20fd      	movs	r0, #253	; 0xfd
 8001840:	f7fe fe74 	bl	800052c <ILI9341_Draw_Hollow_Rectangle_Coord>
			ILI9341_Draw_Filled_Rectangle_Coord(292, 8, 295, 15, WHITE);
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	230f      	movs	r3, #15
 800184c:	f240 1227 	movw	r2, #295	; 0x127
 8001850:	2108      	movs	r1, #8
 8001852:	f44f 7092 	mov.w	r0, #292	; 0x124
 8001856:	f7fe feea 	bl	800062e <ILI9341_Draw_Filled_Rectangle_Coord>
	if(tempPercent!=percent){
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <checkBattery+0x178>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <checkBattery+0x168>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d02d      	beq.n	80018c2 <checkBattery+0x156>
		ILI9341_Draw_Filled_Rectangle_Coord(254, 6, 290, 17, i);
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <checkBattery+0x16c>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2311      	movs	r3, #17
 800186e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001872:	2106      	movs	r1, #6
 8001874:	20fe      	movs	r0, #254	; 0xfe
 8001876:	f7fe feda 	bl	800062e <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(j, 17, 290, 6, BLACK);
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <checkBattery+0x164>)
 800187c:	8818      	ldrh	r0, [r3, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2306      	movs	r3, #6
 8001884:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001888:	2111      	movs	r1, #17
 800188a:	f7fe fed0 	bl	800062e <ILI9341_Draw_Filled_Rectangle_Coord>
		tempPercent=percent;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <checkBattery+0x168>)
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <checkBattery+0x178>)
 8001894:	801a      	strh	r2, [r3, #0]
		ILI9341_DrawText(trans_str, FONT3, 216, 5, WHITE, BLACK);
 8001896:	2300      	movs	r3, #0
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2305      	movs	r3, #5
 80018a2:	22d8      	movs	r2, #216	; 0xd8
 80018a4:	4910      	ldr	r1, [pc, #64]	; (80018e8 <checkBattery+0x17c>)
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <checkBattery+0x174>)
 80018a8:	f7fe ff1f 	bl	80006ea <ILI9341_DrawText>
		ILI9341_DrawText("%", FONT3, 237, 5, WHITE, BLACK);
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2305      	movs	r3, #5
 80018b8:	22ed      	movs	r2, #237	; 0xed
 80018ba:	490b      	ldr	r1, [pc, #44]	; (80018e8 <checkBattery+0x17c>)
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <checkBattery+0x180>)
 80018be:	f7fe ff14 	bl	80006ea <ILI9341_DrawText>
	}
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200000e8 	.word	0x200000e8
 80018cc:	20000098 	.word	0x20000098
 80018d0:	20000004 	.word	0x20000004
 80018d4:	2000009a 	.word	0x2000009a
 80018d8:	20000118 	.word	0x20000118
 80018dc:	080056f8 	.word	0x080056f8
 80018e0:	2000009c 	.word	0x2000009c
 80018e4:	2000011a 	.word	0x2000011a
 80018e8:	08005990 	.word	0x08005990
 80018ec:	080056fc 	.word	0x080056fc

080018f0 <clock>:
void clock()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af02      	add	r7, sp, #8
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80018f6:	2200      	movs	r2, #0
 80018f8:	4938      	ldr	r1, [pc, #224]	; (80019dc <clock+0xec>)
 80018fa:	4839      	ldr	r0, [pc, #228]	; (80019e0 <clock+0xf0>)
 80018fc:	f002 f946 	bl	8003b8c <HAL_RTC_GetTime>
	 if(sTime.Minutes<10){
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <clock+0xec>)
 8001902:	785b      	ldrb	r3, [r3, #1]
 8001904:	2b09      	cmp	r3, #9
 8001906:	d80f      	bhi.n	8001928 <clock+0x38>
		 snprintf(trans_str, 62, "%d:0%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001908:	4b34      	ldr	r3, [pc, #208]	; (80019dc <clock+0xec>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <clock+0xec>)
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	461a      	mov	r2, r3
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <clock+0xec>)
 8001916:	789b      	ldrb	r3, [r3, #2]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	9200      	str	r2, [sp, #0]
 800191c:	460b      	mov	r3, r1
 800191e:	4a31      	ldr	r2, [pc, #196]	; (80019e4 <clock+0xf4>)
 8001920:	213e      	movs	r1, #62	; 0x3e
 8001922:	4831      	ldr	r0, [pc, #196]	; (80019e8 <clock+0xf8>)
 8001924:	f003 fa8a 	bl	8004e3c <sniprintf>
	 }
	 if(sTime.Seconds<10){
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <clock+0xec>)
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	2b09      	cmp	r3, #9
 800192e:	d80f      	bhi.n	8001950 <clock+0x60>
		 snprintf(trans_str, 62, "%d:%d:0%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <clock+0xec>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <clock+0xec>)
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	461a      	mov	r2, r3
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <clock+0xec>)
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	9200      	str	r2, [sp, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <clock+0xfc>)
 8001948:	213e      	movs	r1, #62	; 0x3e
 800194a:	4827      	ldr	r0, [pc, #156]	; (80019e8 <clock+0xf8>)
 800194c:	f003 fa76 	bl	8004e3c <sniprintf>
		 }

	 if(sTime.Hours<10){
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <clock+0xec>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d80f      	bhi.n	8001978 <clock+0x88>
		 snprintf(trans_str, 62, "0%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <clock+0xec>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <clock+0xec>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	461a      	mov	r2, r3
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <clock+0xec>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	460b      	mov	r3, r1
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <clock+0x100>)
 8001970:	213e      	movs	r1, #62	; 0x3e
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <clock+0xf8>)
 8001974:	f003 fa62 	bl	8004e3c <sniprintf>
			 }

	 if((sTime.Hours<10)&&(sTime.Minutes<10)){
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <clock+0xec>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b09      	cmp	r3, #9
 800197e:	d813      	bhi.n	80019a8 <clock+0xb8>
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <clock+0xec>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	2b09      	cmp	r3, #9
 8001986:	d80f      	bhi.n	80019a8 <clock+0xb8>
	 		 snprintf(trans_str, 62, "0%d:0%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <clock+0xec>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <clock+0xec>)
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	461a      	mov	r2, r3
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <clock+0xec>)
 8001996:	789b      	ldrb	r3, [r3, #2]
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	460b      	mov	r3, r1
 800199e:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <clock+0x104>)
 80019a0:	213e      	movs	r1, #62	; 0x3e
 80019a2:	4811      	ldr	r0, [pc, #68]	; (80019e8 <clock+0xf8>)
 80019a4:	f003 fa4a 	bl	8004e3c <sniprintf>
	 			 }
		         //snprintf(trans_str, 62, "%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
		         //ILI9341_DrawText(trans_str, 10, 10, WHITE, 2, BLACK);
		         if(tempClock!=sTime.Seconds){
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <clock+0xec>)
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <clock+0x108>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d00f      	beq.n	80019d6 <clock+0xe6>
		        	 tempClock=sTime.Seconds;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <clock+0xec>)
 80019b8:	789b      	ldrb	r3, [r3, #2]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <clock+0x108>)
 80019be:	801a      	strh	r2, [r3, #0]
		        	 ILI9341_DrawText(trans_str, FONT4, 0, 0, WHITE, BLACK);}
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	2200      	movs	r2, #0
 80019ce:	490b      	ldr	r1, [pc, #44]	; (80019fc <clock+0x10c>)
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <clock+0xf8>)
 80019d2:	f7fe fe8a 	bl	80006ea <ILI9341_DrawText>
		         }
		        //  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
		       //  snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
		       //  ILI9341_Draw_Text(trans_str, 10, 30, WHITE, 2, BLACK);
		         //HAL_Delay(1000);
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000094 	.word	0x20000094
 80019e0:	20000120 	.word	0x20000120
 80019e4:	08005700 	.word	0x08005700
 80019e8:	2000009c 	.word	0x2000009c
 80019ec:	0800570c 	.word	0x0800570c
 80019f0:	08005718 	.word	0x08005718
 80019f4:	08005724 	.word	0x08005724
 80019f8:	2000011c 	.word	0x2000011c
 80019fc:	080062f4 	.word	0x080062f4

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>
	...

08001a0c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2100      	movs	r1, #0
 8001a16:	460a      	mov	r2, r1
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_RTC_Init+0x90>)
 8001a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a36:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a38:	4817      	ldr	r0, [pc, #92]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a3a:	f001 ff79 	bl	8003930 <HAL_RTC_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001a44:	f7ff ffdc 	bl	8001a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 9;
 8001a4c:	2309      	movs	r3, #9
 8001a4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8001a50:	231e      	movs	r3, #30
 8001a52:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480f      	ldr	r0, [pc, #60]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a5c:	f001 fffe 	bl	8003a5c <HAL_RTC_SetTime>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001a66:	f7ff ffcb 	bl	8001a00 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8001a72:	2301      	movs	r3, #1
 8001a74:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 21;
 8001a76:	2315      	movs	r3, #21
 8001a78:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_RTC_Init+0x8c>)
 8001a82:	f002 f95b 	bl	8003d3c <HAL_RTC_SetDate>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001a8c:	f7ff ffb8 	bl	8001a00 <Error_Handler>
  }

}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000120 	.word	0x20000120
 8001a9c:	40002800 	.word	0x40002800

08001aa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_RTC_MspInit+0x3c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d110      	bne.n	8001ad4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ab2:	f001 f98f 	bl	8002dd4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RTC_MspInit+0x40>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RTC_MspInit+0x40>)
 8001abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RTC_MspInit+0x40>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RTC_MspInit+0x44>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40002800 	.word	0x40002800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	4242043c 	.word	0x4242043c

08001ae8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001aee:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <MX_SPI2_Init+0x6c>)
 8001af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001af4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001afc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b36:	220a      	movs	r2, #10
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_SPI2_Init+0x68>)
 8001b3c:	f002 fc56 	bl	80043ec <HAL_SPI_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001b46:	f7ff ff5b 	bl	8001a00 <Error_Handler>
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000134 	.word	0x20000134
 8001b54:	40003800 	.word	0x40003800

08001b58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a16      	ldr	r2, [pc, #88]	; (8001bcc <HAL_SPI_MspInit+0x74>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d124      	bne.n	8001bc2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b82:	61d3      	str	r3, [r2, #28]
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_SPI_MspInit+0x78>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ba8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_SPI_MspInit+0x7c>)
 8001bbe:	f000 ff5d 	bl	8002a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40003800 	.word	0x40003800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010c00 	.word	0x40010c00

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x60>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_MspInit+0x60>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 f919 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f003 f88c 	bl	8004dd8 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000c000 	.word	0x2000c000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	200000dc 	.word	0x200000dc
 8001cf4:	200001e8 	.word	0x200001e8

08001cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	463b      	mov	r3, r7
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <MX_TIM1_Init+0x9c>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d4c:	4813      	ldr	r0, [pc, #76]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d4e:	f002 fdb3 	bl	80048b8 <HAL_TIM_Base_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d58:	f7ff fe52 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	4619      	mov	r1, r3
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d6a:	f002 fdf4 	bl	8004956 <HAL_TIM_ConfigClockSource>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d74:	f7ff fe44 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d80:	463b      	mov	r3, r7
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_TIM1_Init+0x98>)
 8001d86:	f002 ffbb 	bl	8004d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d90:	f7ff fe36 	bl	8001a00 <Error_Handler>
  }

}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2000018c 	.word	0x2000018c
 8001da0:	40012c00 	.word	0x40012c00

08001da4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <HAL_TIM_Base_MspInit+0x34>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d10b      	bne.n	8001dce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_TIM_Base_MspInit+0x38>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_TIM_Base_MspInit+0x38>)
 8001dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc0:	6193      	str	r3, [r2, #24]
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_TIM_Base_MspInit+0x38>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40021000 	.word	0x40021000

08001de0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001de0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001de2:	e003      	b.n	8001dec <LoopCopyDataInit>

08001de4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001de6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001de8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dea:	3104      	adds	r1, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dec:	480a      	ldr	r0, [pc, #40]	; (8001e18 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001df0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001df2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001df4:	d3f6      	bcc.n	8001de4 <CopyDataInit>
  ldr r2, =_sbss
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001df8:	e002      	b.n	8001e00 <LoopFillZerobss>

08001dfa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001dfc:	f842 3b04 	str.w	r3, [r2], #4

08001e00 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e02:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e04:	d3f9      	bcc.n	8001dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e06:	f7ff ff77 	bl	8001cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f002 ffeb 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0e:	f7ff fb93 	bl	8001538 <main>
  bx lr
 8001e12:	4770      	bx	lr
  ldr r3, =_sidata
 8001e14:	0800f2f0 	.word	0x0800f2f0
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e1c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001e20:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001e24:	200001e8 	.word	0x200001e8

08001e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC1_2_IRQHandler>
	...

08001e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_Init+0x28>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_Init+0x28>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 fde9 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f808 	bl	8001e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e48:	f7ff fec6 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_InitTick+0x54>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x58>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fdf3 	bl	8002a62 <HAL_SYSTICK_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00e      	b.n	8001ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d80a      	bhi.n	8001ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 fdc9 	bl	8002a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_InitTick+0x5c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	2000000c 	.word	0x2000000c

08001eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_IncTick+0x1c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_IncTick+0x20>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	200001d4 	.word	0x200001d4

08001edc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <HAL_GetTick+0x10>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	200001d4 	.word	0x200001d4

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffe0 	bl	8001edc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000010 	.word	0x20000010

08001f38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0ce      	b.n	80020f8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fa34 	bl	80013e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fbc3 	bl	8002708 <ADC_ConversionStop_Disable>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80a9 	bne.w	80020e6 <HAL_ADC_Init+0x1ae>
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80a5 	bne.w	80020e6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fa4:	f023 0302 	bic.w	r3, r3, #2
 8001fa8:	f043 0202 	orr.w	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4951      	ldr	r1, [pc, #324]	; (8002100 <HAL_ADC_Init+0x1c8>)
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d10a      	bne.n	8001fd4 <HAL_ADC_Init+0x9c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001fc6:	d002      	beq.n	8001fce <HAL_ADC_Init+0x96>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	e004      	b.n	8001fd8 <HAL_ADC_Init+0xa0>
 8001fce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001fd2:	e001      	b.n	8001fd8 <HAL_ADC_Init+0xa0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
 8001fde:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fe0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_Init+0xc2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_ADC_Init+0xc8>
 8001ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffe:	e000      	b.n	8002002 <HAL_ADC_Init+0xca>
 8002000:	2300      	movs	r3, #0
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7d1b      	ldrb	r3, [r3, #20]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d119      	bne.n	8002044 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	3b01      	subs	r3, #1
 800201e:	035a      	lsls	r2, r3, #13
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e00b      	b.n	8002044 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	430a      	orrs	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_ADC_Init+0x1cc>)
 8002060:	4013      	ands	r3, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	430b      	orrs	r3, r1
 800206a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002074:	d003      	beq.n	800207e <HAL_ADC_Init+0x146>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d104      	bne.n	8002088 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	3b01      	subs	r3, #1
 8002084:	051b      	lsls	r3, r3, #20
 8002086:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	430a      	orrs	r2, r1
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_ADC_Init+0x1d0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020c2:	e018      	b.n	80020f6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f023 0312 	bic.w	r3, r3, #18
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f043 0210 	orr.w	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40013c00 	.word	0x40013c00
 8002104:	ffe1f7fd 	.word	0xffe1f7fd
 8002108:	ff1f0efe 	.word	0xff1f0efe

0800210c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Start+0x1a>
 8002122:	2302      	movs	r3, #2
 8002124:	e098      	b.n	8002258 <HAL_ADC_Start+0x14c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 fa98 	bl	8002664 <ADC_Enable>
 8002134:	4603      	mov	r3, r0
 8002136:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8087 	bne.w	800224e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a41      	ldr	r2, [pc, #260]	; (8002260 <HAL_ADC_Start+0x154>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d105      	bne.n	800216a <HAL_ADC_Start+0x5e>
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_ADC_Start+0x158>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002180:	2b00      	cmp	r3, #0
 8002182:	d026      	beq.n	80021d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800218c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002194:	e01d      	b.n	80021d2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <HAL_ADC_Start+0x158>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d004      	beq.n	80021b6 <HAL_ADC_Start+0xaa>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_ADC_Start+0x154>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10d      	bne.n	80021d2 <HAL_ADC_Start+0xc6>
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_ADC_Start+0x158>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f023 0206 	bic.w	r2, r3, #6
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021ea:	e002      	b.n	80021f2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f06f 0202 	mvn.w	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800220e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002212:	d113      	bne.n	800223c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_ADC_Start+0x154>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d105      	bne.n	800222a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800221e:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_ADC_Start+0x158>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d108      	bne.n	800223c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	e00c      	b.n	8002256 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e003      	b.n	8002256 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40012800 	.word	0x40012800
 8002264:	40012400 	.word	0x40012400

08002268 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800227e:	f7ff fe2d 	bl	8001edc <HAL_GetTick>
 8002282:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f043 0220 	orr.w	r2, r3, #32
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0c8      	b.n	800243c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d12a      	bne.n	800230e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d123      	bne.n	800230e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022c6:	e01a      	b.n	80022fe <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d016      	beq.n	80022fe <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d007      	beq.n	80022e6 <HAL_ADC_PollForConversion+0x7e>
 80022d6:	f7ff fe01 	bl	8001edc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20b      	bcs.n	80022fe <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e09e      	b.n	800243c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0dd      	beq.n	80022c8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800230c:	e06c      	b.n	80023e8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_ADC_PollForConversion+0x1dc>)
 8002310:	681c      	ldr	r4, [r3, #0]
 8002312:	2002      	movs	r0, #2
 8002314:	f001 fa26 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 8002318:	4603      	mov	r3, r0
 800231a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	4b48      	ldr	r3, [pc, #288]	; (8002448 <HAL_ADC_PollForConversion+0x1e0>)
 8002326:	400b      	ands	r3, r1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d118      	bne.n	800235e <HAL_ADC_PollForConversion+0xf6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68d9      	ldr	r1, [r3, #12]
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_ADC_PollForConversion+0x1e4>)
 8002334:	400b      	ands	r3, r1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d111      	bne.n	800235e <HAL_ADC_PollForConversion+0xf6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6919      	ldr	r1, [r3, #16]
 8002340:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_ADC_PollForConversion+0x1e8>)
 8002342:	400b      	ands	r3, r1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_ADC_PollForConversion+0xf2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_ADC_PollForConversion+0x1ec>)
 8002350:	400b      	ands	r3, r1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_PollForConversion+0xf2>
 8002356:	2314      	movs	r3, #20
 8002358:	e020      	b.n	800239c <HAL_ADC_PollForConversion+0x134>
 800235a:	2329      	movs	r3, #41	; 0x29
 800235c:	e01e      	b.n	800239c <HAL_ADC_PollForConversion+0x134>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6919      	ldr	r1, [r3, #16]
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_ADC_PollForConversion+0x1e8>)
 8002366:	400b      	ands	r3, r1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HAL_ADC_PollForConversion+0x112>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <HAL_ADC_PollForConversion+0x1ec>)
 8002374:	400b      	ands	r3, r1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00d      	beq.n	8002396 <HAL_ADC_PollForConversion+0x12e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_ADC_PollForConversion+0x1f0>)
 8002382:	400b      	ands	r3, r1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d108      	bne.n	800239a <HAL_ADC_PollForConversion+0x132>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	4b32      	ldr	r3, [pc, #200]	; (8002458 <HAL_ADC_PollForConversion+0x1f0>)
 8002390:	400b      	ands	r3, r1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_PollForConversion+0x132>
 8002396:	2354      	movs	r3, #84	; 0x54
 8002398:	e000      	b.n	800239c <HAL_ADC_PollForConversion+0x134>
 800239a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023a2:	e01d      	b.n	80023e0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d016      	beq.n	80023da <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_ADC_PollForConversion+0x15a>
 80023b2:	f7ff fd93 	bl	8001edc <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d20b      	bcs.n	80023da <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f043 0204 	orr.w	r2, r3, #4
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e030      	b.n	800243c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3301      	adds	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8dd      	bhi.n	80023a4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0212 	mvn.w	r2, #18
 80023f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002408:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800240c:	d115      	bne.n	800243a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002412:	2b00      	cmp	r3, #0
 8002414:	d111      	bne.n	800243a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	20000008 	.word	0x20000008
 8002448:	24924924 	.word	0x24924924
 800244c:	00924924 	.word	0x00924924
 8002450:	12492492 	.word	0x12492492
 8002454:	00492492 	.word	0x00492492
 8002458:	00249249 	.word	0x00249249

0800245c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x20>
 8002490:	2302      	movs	r3, #2
 8002492:	e0dc      	b.n	800264e <HAL_ADC_ConfigChannel+0x1da>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d81c      	bhi.n	80024de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b05      	subs	r3, #5
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b05      	subs	r3, #5
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	e03c      	b.n	8002558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d81c      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b23      	subs	r3, #35	; 0x23
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	4019      	ands	r1, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b23      	subs	r3, #35	; 0x23
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
 800251e:	e01b      	b.n	8002558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b41      	subs	r3, #65	; 0x41
 8002532:	221f      	movs	r2, #31
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	4019      	ands	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	3b41      	subs	r3, #65	; 0x41
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b09      	cmp	r3, #9
 800255e:	d91c      	bls.n	800259a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	2207      	movs	r2, #7
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	4019      	ands	r1, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6898      	ldr	r0, [r3, #8]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	3b1e      	subs	r3, #30
 800258c:	fa00 f203 	lsl.w	r2, r0, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	e019      	b.n	80025ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6919      	ldr	r1, [r3, #16]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	2207      	movs	r2, #7
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4019      	ands	r1, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	6898      	ldr	r0, [r3, #8]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b10      	cmp	r3, #16
 80025d4:	d003      	beq.n	80025de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025da:	2b11      	cmp	r3, #17
 80025dc:	d132      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_ADC_ConfigChannel+0x1e4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d125      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d126      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002604:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d11a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_ADC_ConfigChannel+0x1e8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_ADC_ConfigChannel+0x1ec>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9a      	lsrs	r2, r3, #18
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002624:	e002      	b.n	800262c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x1b2>
 8002632:	e007      	b.n	8002644 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800264c:	7bfb      	ldrb	r3, [r7, #15]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012400 	.word	0x40012400
 800265c:	20000008 	.word	0x20000008
 8002660:	431bde83 	.word	0x431bde83

08002664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d039      	beq.n	80026f6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <ADC_Enable+0x9c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <ADC_Enable+0xa0>)
 8002698:	fba2 2303 	umull	r2, r3, r2, r3
 800269c:	0c9b      	lsrs	r3, r3, #18
 800269e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a0:	e002      	b.n	80026a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f9      	bne.n	80026a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ae:	f7ff fc15 	bl	8001edc <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026b4:	e018      	b.n	80026e8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b6:	f7ff fc11 	bl	8001edc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d911      	bls.n	80026e8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e007      	b.n	80026f8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d1df      	bne.n	80026b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000008 	.word	0x20000008
 8002704:	431bde83 	.word	0x431bde83

08002708 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d127      	bne.n	8002772 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002732:	f7ff fbd3 	bl	8001edc <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002738:	e014      	b.n	8002764 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800273a:	f7ff fbcf 	bl	8001edc <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d90d      	bls.n	8002764 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b01      	cmp	r3, #1
 8002770:	d0e3      	beq.n	800273a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADCEx_Calibration_Start+0x1e>
 8002796:	2302      	movs	r3, #2
 8002798:	e086      	b.n	80028a8 <HAL_ADCEx_Calibration_Start+0x12c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ffb0 	bl	8002708 <ADC_ConversionStop_Disable>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d175      	bne.n	800289e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ba:	f023 0302 	bic.w	r3, r3, #2
 80027be:	f043 0202 	orr.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80027c6:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_ADCEx_Calibration_Start+0x134>)
 80027c8:	681c      	ldr	r4, [r3, #0]
 80027ca:	2002      	movs	r0, #2
 80027cc:	f000 ffca 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 80027d0:	4603      	mov	r3, r0
 80027d2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80027d6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80027d8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80027da:	e002      	b.n	80027e2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ff3b 	bl	8002664 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80027fe:	f7ff fb6d 	bl	8001edc <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002804:	e014      	b.n	8002830 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002806:	f7ff fb69 	bl	8001edc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b0a      	cmp	r3, #10
 8002812:	d90d      	bls.n	8002830 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	f023 0312 	bic.w	r3, r3, #18
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03b      	b.n	80028a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e3      	bne.n	8002806 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0204 	orr.w	r2, r2, #4
 800284c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800284e:	f7ff fb45 	bl	8001edc <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002854:	e014      	b.n	8002880 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002856:	f7ff fb41 	bl	8001edc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b0a      	cmp	r3, #10
 8002862:	d90d      	bls.n	8002880 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f023 0312 	bic.w	r3, r3, #18
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e013      	b.n	80028a8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e3      	bne.n	8002856 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd90      	pop	{r4, r7, pc}
 80028b0:	20000008 	.word	0x20000008

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	; (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff90 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff49 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff5e 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff90 	bl	800296c <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5f 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffb0 	bl	80029d0 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b08b      	sub	sp, #44	; 0x2c
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	e179      	b.n	8002d84 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a90:	2201      	movs	r2, #1
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8168 	bne.w	8002d7e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4aa0      	ldr	r2, [pc, #640]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d05e      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ab8:	4a9e      	ldr	r2, [pc, #632]	; (8002d34 <HAL_GPIO_Init+0x2b8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d875      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002abe:	4a9e      	ldr	r2, [pc, #632]	; (8002d38 <HAL_GPIO_Init+0x2bc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d058      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ac4:	4a9c      	ldr	r2, [pc, #624]	; (8002d38 <HAL_GPIO_Init+0x2bc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d86f      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002aca:	4a9c      	ldr	r2, [pc, #624]	; (8002d3c <HAL_GPIO_Init+0x2c0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d052      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ad0:	4a9a      	ldr	r2, [pc, #616]	; (8002d3c <HAL_GPIO_Init+0x2c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d869      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002ad6:	4a9a      	ldr	r2, [pc, #616]	; (8002d40 <HAL_GPIO_Init+0x2c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d04c      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002adc:	4a98      	ldr	r2, [pc, #608]	; (8002d40 <HAL_GPIO_Init+0x2c4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d863      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002ae2:	4a98      	ldr	r2, [pc, #608]	; (8002d44 <HAL_GPIO_Init+0x2c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d046      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
 8002ae8:	4a96      	ldr	r2, [pc, #600]	; (8002d44 <HAL_GPIO_Init+0x2c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d85d      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002aee:	2b12      	cmp	r3, #18
 8002af0:	d82a      	bhi.n	8002b48 <HAL_GPIO_Init+0xcc>
 8002af2:	2b12      	cmp	r3, #18
 8002af4:	d859      	bhi.n	8002baa <HAL_GPIO_Init+0x12e>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_GPIO_Init+0x80>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b77 	.word	0x08002b77
 8002b00:	08002b51 	.word	0x08002b51
 8002b04:	08002b63 	.word	0x08002b63
 8002b08:	08002ba5 	.word	0x08002ba5
 8002b0c:	08002bab 	.word	0x08002bab
 8002b10:	08002bab 	.word	0x08002bab
 8002b14:	08002bab 	.word	0x08002bab
 8002b18:	08002bab 	.word	0x08002bab
 8002b1c:	08002bab 	.word	0x08002bab
 8002b20:	08002bab 	.word	0x08002bab
 8002b24:	08002bab 	.word	0x08002bab
 8002b28:	08002bab 	.word	0x08002bab
 8002b2c:	08002bab 	.word	0x08002bab
 8002b30:	08002bab 	.word	0x08002bab
 8002b34:	08002bab 	.word	0x08002bab
 8002b38:	08002bab 	.word	0x08002bab
 8002b3c:	08002bab 	.word	0x08002bab
 8002b40:	08002b59 	.word	0x08002b59
 8002b44:	08002b6d 	.word	0x08002b6d
 8002b48:	4a7f      	ldr	r2, [pc, #508]	; (8002d48 <HAL_GPIO_Init+0x2cc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b4e:	e02c      	b.n	8002baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	623b      	str	r3, [r7, #32]
          break;
 8002b56:	e029      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e024      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	3308      	adds	r3, #8
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e01f      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	330c      	adds	r3, #12
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e01a      	b.n	8002bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e013      	b.n	8002bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d105      	bne.n	8002b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	611a      	str	r2, [r3, #16]
          break;
 8002b96:	e009      	b.n	8002bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	615a      	str	r2, [r3, #20]
          break;
 8002ba2:	e003      	b.n	8002bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
          break;
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x130>
          break;
 8002baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d801      	bhi.n	8002bb6 <HAL_GPIO_Init+0x13a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	e001      	b.n	8002bba <HAL_GPIO_Init+0x13e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2bff      	cmp	r3, #255	; 0xff
 8002bc0:	d802      	bhi.n	8002bc8 <HAL_GPIO_Init+0x14c>
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	e002      	b.n	8002bce <HAL_GPIO_Init+0x152>
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	3b08      	subs	r3, #8
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	210f      	movs	r1, #15
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	431a      	orrs	r2, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80c1 	beq.w	8002d7e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bfc:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4a52      	ldr	r2, [pc, #328]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6193      	str	r3, [r2, #24]
 8002c08:	4b50      	ldr	r3, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x2d0>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c14:	4a4e      	ldr	r2, [pc, #312]	; (8002d50 <HAL_GPIO_Init+0x2d4>)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a46      	ldr	r2, [pc, #280]	; (8002d54 <HAL_GPIO_Init+0x2d8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d01f      	beq.n	8002c80 <HAL_GPIO_Init+0x204>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a45      	ldr	r2, [pc, #276]	; (8002d58 <HAL_GPIO_Init+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d019      	beq.n	8002c7c <HAL_GPIO_Init+0x200>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a44      	ldr	r2, [pc, #272]	; (8002d5c <HAL_GPIO_Init+0x2e0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d013      	beq.n	8002c78 <HAL_GPIO_Init+0x1fc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <HAL_GPIO_Init+0x2e4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00d      	beq.n	8002c74 <HAL_GPIO_Init+0x1f8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_GPIO_Init+0x2e8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <HAL_GPIO_Init+0x1f4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <HAL_GPIO_Init+0x2ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d101      	bne.n	8002c6c <HAL_GPIO_Init+0x1f0>
 8002c68:	2305      	movs	r3, #5
 8002c6a:	e00a      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c6c:	2306      	movs	r3, #6
 8002c6e:	e008      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c70:	2304      	movs	r3, #4
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c74:	2303      	movs	r3, #3
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x206>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c92:	492f      	ldr	r1, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x2d4>)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cac:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	492e      	ldr	r1, [pc, #184]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cba:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	492a      	ldr	r1, [pc, #168]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4924      	ldr	r1, [pc, #144]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	4920      	ldr	r1, [pc, #128]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	491a      	ldr	r1, [pc, #104]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4916      	ldr	r1, [pc, #88]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d025      	beq.n	8002d70 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4910      	ldr	r1, [pc, #64]	; (8002d6c <HAL_GPIO_Init+0x2f0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60cb      	str	r3, [r1, #12]
 8002d30:	e025      	b.n	8002d7e <HAL_GPIO_Init+0x302>
 8002d32:	bf00      	nop
 8002d34:	10320000 	.word	0x10320000
 8002d38:	10310000 	.word	0x10310000
 8002d3c:	10220000 	.word	0x10220000
 8002d40:	10210000 	.word	0x10210000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	40011800 	.word	0x40011800
 8002d68:	40011c00 	.word	0x40011c00
 8002d6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	4909      	ldr	r1, [pc, #36]	; (8002da0 <HAL_GPIO_Init+0x324>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f47f ae7e 	bne.w	8002a90 <HAL_GPIO_Init+0x14>
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	372c      	adds	r7, #44	; 0x2c
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40010400 	.word	0x40010400

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	420e0020 	.word	0x420e0020

08002dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e26c      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e0c:	4b92      	ldr	r3, [pc, #584]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d00c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e18:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d112      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
 8002e24:	4b8c      	ldr	r3, [pc, #560]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e30:	d10b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e32:	4b89      	ldr	r3, [pc, #548]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06c      	beq.n	8002f18 <HAL_RCC_OscConfig+0x12c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d168      	bne.n	8002f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e246      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x76>
 8002e54:	4b80      	ldr	r3, [pc, #512]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a7f      	ldr	r2, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e02e      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a7a      	ldr	r2, [pc, #488]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e01d      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0xbc>
 8002e8e:	4b72      	ldr	r3, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a71      	ldr	r2, [pc, #452]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0xd4>
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6a      	ldr	r2, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b68      	ldr	r3, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a67      	ldr	r2, [pc, #412]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7ff f808 	bl	8001edc <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7ff f804 	bl	8001edc <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1fa      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0f0      	beq.n	8002ed0 <HAL_RCC_OscConfig+0xe4>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fe fff4 	bl	8001edc <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fff0 	bl	8001edc <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b64      	cmp	r3, #100	; 0x64
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e1e6      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x10c>
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d063      	beq.n	8002fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f32:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d11c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
 8002f3e:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d116      	bne.n	8002f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1ba      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4939      	ldr	r1, [pc, #228]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	e03a      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d020      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f80:	4b36      	ldr	r3, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe ffa9 	bl	8001edc <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8e:	f7fe ffa5 	bl	8001edc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e19b      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fac:	4b2a      	ldr	r3, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4927      	ldr	r1, [pc, #156]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e015      	b.n	8002fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe ff88 	bl	8001edc <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fe ff84 	bl	8001edc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e17a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03a      	beq.n	8003070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d019      	beq.n	8003036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fe ff68 	bl	8001edc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe ff64 	bl	8001edc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e15a      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x26c>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800302e:	2001      	movs	r0, #1
 8003030:	f000 fac4 	bl	80035bc <RCC_Delay>
 8003034:	e01c      	b.n	8003070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_OscConfig+0x274>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303c:	f7fe ff4e 	bl	8001edc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e00f      	b.n	8003064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe ff4a 	bl	8001edc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d908      	bls.n	8003064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e140      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	42420000 	.word	0x42420000
 8003060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b9e      	ldr	r3, [pc, #632]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e9      	bne.n	8003044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80a6 	beq.w	80031ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b97      	ldr	r3, [pc, #604]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b94      	ldr	r3, [pc, #592]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a93      	ldr	r2, [pc, #588]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b91      	ldr	r3, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b8e      	ldr	r3, [pc, #568]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b8b      	ldr	r3, [pc, #556]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe ff0b 	bl	8001edc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe ff07 	bl	8001edc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	; 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0fd      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b81      	ldr	r3, [pc, #516]	; (80032e4 <HAL_RCC_OscConfig+0x4f8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x312>
 80030f0:	4b7b      	ldr	r3, [pc, #492]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4a7a      	ldr	r2, [pc, #488]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6213      	str	r3, [r2, #32]
 80030fc:	e02d      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003106:	4b76      	ldr	r3, [pc, #472]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a75      	ldr	r2, [pc, #468]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4b73      	ldr	r3, [pc, #460]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e01c      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d10c      	bne.n	8003142 <HAL_RCC_OscConfig+0x356>
 8003128:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a6c      	ldr	r2, [pc, #432]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800312e:	f043 0304 	orr.w	r3, r3, #4
 8003132:	6213      	str	r3, [r2, #32]
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a69      	ldr	r2, [pc, #420]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	e00b      	b.n	800315a <HAL_RCC_OscConfig+0x36e>
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4a66      	ldr	r2, [pc, #408]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6213      	str	r3, [r2, #32]
 800314e:	4b64      	ldr	r3, [pc, #400]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	4a63      	ldr	r2, [pc, #396]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	f023 0304 	bic.w	r3, r3, #4
 8003158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7fe febb 	bl	8001edc <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316a:	f7fe feb7 	bl	8001edc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	f241 3288 	movw	r2, #5000	; 0x1388
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e0ab      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ee      	beq.n	800316a <HAL_RCC_OscConfig+0x37e>
 800318c:	e014      	b.n	80031b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe fea5 	bl	8001edc <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fea1 	bl	8001edc <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e095      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ee      	bne.n	8003196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031be:	4b48      	ldr	r3, [pc, #288]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8081 	beq.w	80032d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d061      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d146      	bne.n	8003276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fe75 	bl	8001edc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fe71 	bl	8001edc <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e067      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	4b35      	ldr	r3, [pc, #212]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	d108      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800321e:	4b30      	ldr	r3, [pc, #192]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	492d      	ldr	r1, [pc, #180]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003230:	4b2b      	ldr	r3, [pc, #172]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a19      	ldr	r1, [r3, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	430b      	orrs	r3, r1
 8003242:	4927      	ldr	r1, [pc, #156]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fe45 	bl	8001edc <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fe41 	bl	8001edc <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e037      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x46a>
 8003274:	e02f      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <HAL_RCC_OscConfig+0x4fc>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fe2e 	bl	8001edc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fe2a 	bl	8001edc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e020      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x498>
 80032a2:	e018      	b.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x4f4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d001      	beq.n	80032d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40007000 	.word	0x40007000
 80032e8:	42420060 	.word	0x42420060

080032ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0d0      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b6a      	ldr	r3, [pc, #424]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b67      	ldr	r3, [pc, #412]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4965      	ldr	r1, [pc, #404]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0b8      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003360:	4b53      	ldr	r3, [pc, #332]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800336a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	494d      	ldr	r1, [pc, #308]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d040      	beq.n	800340c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d115      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e07f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4936      	ldr	r1, [pc, #216]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fe fd7e 	bl	8001edc <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fe fd7a 	bl	8001edc <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e053      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d210      	bcs.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4922      	ldr	r1, [pc, #136]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e032      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	4313      	orrs	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x1d0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe fcdc 	bl	8001e58 <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	0800f29c 	.word	0x0800f29c
 80034b8:	20000008 	.word	0x20000008
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b08a      	sub	sp, #40	; 0x28
 80034c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034c8:	1d3c      	adds	r4, r7, #4
 80034ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d0:	f240 2301 	movw	r3, #513	; 0x201
 80034d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d002      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x46>
 80034fe:	e02d      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	623b      	str	r3, [r7, #32]
      break;
 8003504:	e02d      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	0c9b      	lsrs	r3, r3, #18
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003512:	4413      	add	r3, r2
 8003514:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003518:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c5b      	lsrs	r3, r3, #17
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003532:	4413      	add	r3, r2
 8003534:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003538:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	fb02 f203 	mul.w	r2, r2, r3
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	e004      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	623b      	str	r3, [r7, #32]
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800355e:	623b      	str	r3, [r7, #32]
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6a3b      	ldr	r3, [r7, #32]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc90      	pop	{r4, r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	08005730 	.word	0x08005730
 8003574:	40021000 	.word	0x40021000
 8003578:	007a1200 	.word	0x007a1200
 800357c:	003d0900 	.word	0x003d0900

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000008 	.word	0x20000008

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800f2ac 	.word	0x0800f2ac

080035bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <RCC_Delay+0x34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <RCC_Delay+0x38>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d8:	bf00      	nop
  }
  while (Delay --);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	60fa      	str	r2, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f9      	bne.n	80035d8 <RCC_Delay+0x1c>
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000008 	.word	0x20000008
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d07d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003618:	4b4f      	ldr	r3, [pc, #316]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b4c      	ldr	r3, [pc, #304]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
 8003630:	4b49      	ldr	r3, [pc, #292]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fe fc40 	bl	8001edc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fe fc3c 	bl	8001edc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e06d      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367e:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d027      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369c:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fc0b 	bl	8001edc <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fc07 	bl	8001edc <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e036      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4917      	ldr	r1, [pc, #92]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	490b      	ldr	r1, [pc, #44]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373a:	4b07      	ldr	r3, [pc, #28]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
 8003760:	42420440 	.word	0x42420440

08003764 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b08d      	sub	sp, #52	; 0x34
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800376c:	4b6b      	ldr	r3, [pc, #428]	; (800391c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800376e:	f107 040c 	add.w	r4, r7, #12
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003778:	f240 2301 	movw	r3, #513	; 0x201
 800377c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
 8003782:	2300      	movs	r3, #0
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3b01      	subs	r3, #1
 8003796:	2b0f      	cmp	r3, #15
 8003798:	f200 80b6 	bhi.w	8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	08003887 	.word	0x08003887
 80037a8:	080038ed 	.word	0x080038ed
 80037ac:	08003909 	.word	0x08003909
 80037b0:	08003877 	.word	0x08003877
 80037b4:	08003909 	.word	0x08003909
 80037b8:	08003909 	.word	0x08003909
 80037bc:	08003909 	.word	0x08003909
 80037c0:	0800387f 	.word	0x0800387f
 80037c4:	08003909 	.word	0x08003909
 80037c8:	08003909 	.word	0x08003909
 80037cc:	08003909 	.word	0x08003909
 80037d0:	08003909 	.word	0x08003909
 80037d4:	08003909 	.word	0x08003909
 80037d8:	08003909 	.word	0x08003909
 80037dc:	08003909 	.word	0x08003909
 80037e0:	080037e5 	.word	0x080037e5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80037e4:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 808a 	beq.w	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003804:	4413      	add	r3, r2
 8003806:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800380a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003816:	4b42      	ldr	r3, [pc, #264]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0c5b      	lsrs	r3, r3, #17
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003824:	4413      	add	r3, r2
 8003826:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003836:	4a3b      	ldr	r2, [pc, #236]	; (8003924 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	fbb2 f2f3 	udiv	r2, r2, r3
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003846:	e004      	b.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003852:	4b33      	ldr	r3, [pc, #204]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385e:	d102      	bne.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003864:	e052      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	4a30      	ldr	r2, [pc, #192]	; (800392c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003874:	e04a      	b.n	800390c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003876:	f7ff fe23 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800387a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800387c:	e049      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff fe1f 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 8003882:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003884:	e045      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d108      	bne.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a8:	e01f      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d109      	bne.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80038c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c8:	e00f      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038d4:	d11c      	bne.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 80038e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80038e8:	e012      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80038ea:	e011      	b.n	8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80038ec:	f7ff fe52 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 80038f0:	4602      	mov	r2, r0
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	0b9b      	lsrs	r3, r3, #14
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	3301      	adds	r3, #1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	fbb2 f3f3 	udiv	r3, r2, r3
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003906:	e004      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003908:	bf00      	nop
 800390a:	e002      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800390c:	bf00      	nop
 800390e:	e000      	b.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003910:	bf00      	nop
    }
  }
  return (frequency);
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003914:	4618      	mov	r0, r3
 8003916:	3734      	adds	r7, #52	; 0x34
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}
 800391c:	08005740 	.word	0x08005740
 8003920:	40021000 	.word	0x40021000
 8003924:	007a1200 	.word	0x007a1200
 8003928:	003d0900 	.word	0x003d0900
 800392c:	aaaaaaab 	.word	0xaaaaaaab

08003930 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e084      	b.n	8003a50 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7c5b      	ldrb	r3, [r3, #17]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe f8a2 	bl	8001aa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 faa0 	bl	8003ea8 <HAL_RTC_WaitForSynchro>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d004      	beq.n	8003978 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e06b      	b.n	8003a50 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb59 	bl	8004030 <RTC_EnterInitMode>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2204      	movs	r2, #4
 8003988:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e060      	b.n	8003a50 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0207 	bic.w	r2, r2, #7
 800399c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <HAL_RTC_Init+0x128>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_RTC_Init+0x128>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RTC_Init+0x128>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4926      	ldr	r1, [pc, #152]	; (8003a58 <HAL_RTC_Init+0x128>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d003      	beq.n	80039d6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e00e      	b.n	80039f4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7ff fec4 	bl	8003764 <HAL_RCCEx_GetPeriphCLKFreq>
 80039dc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e030      	b.n	8003a50 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f023 010f 	bic.w	r1, r3, #15
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0c1a      	lsrs	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	b291      	uxth	r1, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6812      	ldr	r2, [r2, #0]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb2d 	bl	8004080 <RTC_ExitInitMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00c      	b.n	8003a50 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40006c00 	.word	0x40006c00

08003a5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RTC_SetTime+0x20>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e080      	b.n	8003b82 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	7c1b      	ldrb	r3, [r3, #16]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_RTC_SetTime+0x30>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e07a      	b.n	8003b82 <HAL_RTC_SetTime+0x126>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2202      	movs	r2, #2
 8003a96:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d113      	bne.n	8003ac6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003aa8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	1a5b      	subs	r3, r3, r1
 8003ab8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003aba:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ac0:	4413      	add	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e01e      	b.n	8003b04 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fb1d 	bl	800410a <RTC_Bcd2ToByte>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003ad8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 fb12 	bl	800410a <RTC_Bcd2ToByte>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003af2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	789b      	ldrb	r3, [r3, #2]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb06 	bl	800410a <RTC_Bcd2ToByte>
 8003afe:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003b00:	4423      	add	r3, r4
 8003b02:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fa2b 	bl	8003f62 <RTC_WriteTimeCounter>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2204      	movs	r2, #4
 8003b16:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e02f      	b.n	8003b82 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0205 	bic.w	r2, r2, #5
 8003b30:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fa3c 	bl	8003fb0 <RTC_ReadAlarmCounter>
 8003b38:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d018      	beq.n	8003b74 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d214      	bcs.n	8003b74 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003b50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b54:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa42 	bl	8003fe2 <RTC_WriteAlarmCounter>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2204      	movs	r2, #4
 8003b68:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e006      	b.n	8003b82 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}
	...

08003b8c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_RTC_GetTime+0x28>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0b5      	b.n	8003d24 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0ac      	b.n	8003d24 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f999 	bl	8003f02 <RTC_ReadTimeCounter>
 8003bd0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	4a55      	ldr	r2, [pc, #340]	; (8003d2c <HAL_RTC_GetTime+0x1a0>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0adb      	lsrs	r3, r3, #11
 8003bdc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4b52      	ldr	r3, [pc, #328]	; (8003d2c <HAL_RTC_GetTime+0x1a0>)
 8003be2:	fba3 1302 	umull	r1, r3, r3, r2
 8003be6:	0adb      	lsrs	r3, r3, #11
 8003be8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	4a4f      	ldr	r2, [pc, #316]	; (8003d30 <HAL_RTC_GetTime+0x1a4>)
 8003bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <HAL_RTC_GetTime+0x1a0>)
 8003c04:	fba2 1203 	umull	r1, r2, r2, r3
 8003c08:	0ad2      	lsrs	r2, r2, #11
 8003c0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003c0e:	fb01 f202 	mul.w	r2, r1, r2
 8003c12:	1a9a      	subs	r2, r3, r2
 8003c14:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_RTC_GetTime+0x1a4>)
 8003c16:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1a:	0959      	lsrs	r1, r3, #5
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a5b      	subs	r3, r3, r1
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	1ad1      	subs	r1, r2, r3
 8003c26:	b2ca      	uxtb	r2, r1
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b17      	cmp	r3, #23
 8003c30:	d955      	bls.n	8003cde <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_RTC_GetTime+0x1a8>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003c3e:	6939      	ldr	r1, [r7, #16]
 8003c40:	4b3c      	ldr	r3, [pc, #240]	; (8003d34 <HAL_RTC_GetTime+0x1a8>)
 8003c42:	fba3 2301 	umull	r2, r3, r3, r1
 8003c46:	091a      	lsrs	r2, r3, #4
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1aca      	subs	r2, r1, r3
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 f9a9 	bl	8003fb0 <RTC_ReadAlarmCounter>
 8003c5e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d008      	beq.n	8003c7a <HAL_RTC_GetTime+0xee>
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d904      	bls.n	8003c7a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	e002      	b.n	8003c80 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a2d      	ldr	r2, [pc, #180]	; (8003d38 <HAL_RTC_GetTime+0x1ac>)
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f966 	bl	8003f62 <RTC_WriteTimeCounter>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e041      	b.n	8003d24 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cb0:	69f9      	ldr	r1, [r7, #28]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f995 	bl	8003fe2 <RTC_WriteAlarmCounter>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e030      	b.n	8003d24 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003cc2:	69f9      	ldr	r1, [r7, #28]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f98c 	bl	8003fe2 <RTC_WriteAlarmCounter>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e027      	b.n	8003d24 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fa34 	bl	8004144 <RTC_DateUpdate>
 8003cdc:	e003      	b.n	8003ce6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01a      	beq.n	8003d22 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f9ed 	bl	80040d0 <RTC_ByteToBcd2>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f9e4 	bl	80040d0 <RTC_ByteToBcd2>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	789b      	ldrb	r3, [r3, #2]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9db 	bl	80040d0 <RTC_ByteToBcd2>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	91a2b3c5 	.word	0x91a2b3c5
 8003d30:	88888889 	.word	0x88888889
 8003d34:	aaaaaaab 	.word	0xaaaaaaab
 8003d38:	00015180 	.word	0x00015180

08003d3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_RTC_SetDate+0x24>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e097      	b.n	8003e94 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	7c1b      	ldrb	r3, [r3, #16]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_RTC_SetDate+0x34>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e091      	b.n	8003e94 <HAL_RTC_SetDate+0x158>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	78da      	ldrb	r2, [r3, #3]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	785a      	ldrb	r2, [r3, #1]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	789a      	ldrb	r2, [r3, #2]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	739a      	strb	r2, [r3, #14]
 8003d9a:	e01a      	b.n	8003dd2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f9b2 	bl	800410a <RTC_Bcd2ToByte>
 8003da6:	4603      	mov	r3, r0
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f9a9 	bl	800410a <RTC_Bcd2ToByte>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	789b      	ldrb	r3, [r3, #2]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f9a0 	bl	800410a <RTC_Bcd2ToByte>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	7bdb      	ldrb	r3, [r3, #15]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	7b59      	ldrb	r1, [r3, #13]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	7b9b      	ldrb	r3, [r3, #14]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f000 fa8b 	bl	80042fc <RTC_WeekDayNum>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	7b1a      	ldrb	r2, [r3, #12]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f883 	bl	8003f02 <RTC_ReadTimeCounter>
 8003dfc:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <HAL_RTC_SetDate+0x160>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b18      	cmp	r3, #24
 8003e0e:	d93a      	bls.n	8003e86 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4a23      	ldr	r2, [pc, #140]	; (8003ea0 <HAL_RTC_SetDate+0x164>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_RTC_SetDate+0x168>)
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e26:	69f9      	ldr	r1, [r7, #28]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f89a 	bl	8003f62 <RTC_WriteTimeCounter>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d007      	beq.n	8003e44 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2204      	movs	r2, #4
 8003e38:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e027      	b.n	8003e94 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f8b3 	bl	8003fb0 <RTC_ReadAlarmCounter>
 8003e4a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e52:	d018      	beq.n	8003e86 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d214      	bcs.n	8003e86 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003e62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e66:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 f8b9 	bl	8003fe2 <RTC_WriteAlarmCounter>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e006      	b.n	8003e94 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	91a2b3c5 	.word	0x91a2b3c5
 8003ea0:	aaaaaaab 	.word	0xaaaaaaab
 8003ea4:	00015180 	.word	0x00015180

08003ea8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e01d      	b.n	8003efa <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0208 	bic.w	r2, r2, #8
 8003ecc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ece:	f7fe f805 	bl	8001edc <HAL_GetTick>
 8003ed2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ed4:	e009      	b.n	8003eea <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ed6:	f7fe f801 	bl	8001edc <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ee4:	d901      	bls.n	8003eea <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e007      	b.n	8003efa <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ee      	beq.n	8003ed6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	827b      	strh	r3, [r7, #18]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	823b      	strh	r3, [r7, #16]
 8003f12:	2300      	movs	r3, #0
 8003f14:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003f32:	8a7a      	ldrh	r2, [r7, #18]
 8003f34:	8a3b      	ldrh	r3, [r7, #16]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d008      	beq.n	8003f4c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003f3a:	8a3b      	ldrh	r3, [r7, #16]
 8003f3c:	041a      	lsls	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e004      	b.n	8003f56 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003f4c:	8a7b      	ldrh	r3, [r7, #18]
 8003f4e:	041a      	lsls	r2, r3, #16
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f85d 	bl	8004030 <RTC_EnterInitMode>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	e011      	b.n	8003fa6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	0c12      	lsrs	r2, r2, #16
 8003f8a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	b292      	uxth	r2, r2
 8003f94:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f872 	bl	8004080 <RTC_ExitInitMode>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	81fb      	strh	r3, [r7, #14]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	041a      	lsls	r2, r3, #16
 8003fd4:	89bb      	ldrh	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f81d 	bl	8004030 <RTC_EnterInitMode>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	73fb      	strb	r3, [r7, #15]
 8004000:	e011      	b.n	8004026 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	0c12      	lsrs	r2, r2, #16
 800400a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b292      	uxth	r2, r2
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f832 	bl	8004080 <RTC_ExitInitMode>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800403c:	f7fd ff4e 	bl	8001edc <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004042:	e009      	b.n	8004058 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004044:	f7fd ff4a 	bl	8001edc <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004052:	d901      	bls.n	8004058 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e00f      	b.n	8004078 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ee      	beq.n	8004044 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0210 	orr.w	r2, r2, #16
 8004074:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0210 	bic.w	r2, r2, #16
 800409a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800409c:	f7fd ff1e 	bl	8001edc <HAL_GetTick>
 80040a0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80040a2:	e009      	b.n	80040b8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80040a4:	f7fd ff1a 	bl	8001edc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b2:	d901      	bls.n	80040b8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e007      	b.n	80040c8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ee      	beq.n	80040a4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80040de:	e005      	b.n	80040ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	3b0a      	subs	r3, #10
 80040ea:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b09      	cmp	r3, #9
 80040f0:	d8f6      	bhi.n	80040e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	b2db      	uxtb	r3, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr

0800410a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4413      	add	r3, r2
 8004138:	b2db      	uxtb	r3, r3
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7bdb      	ldrb	r3, [r3, #15]
 8004162:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7b5b      	ldrb	r3, [r3, #13]
 8004168:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	7b9b      	ldrb	r3, [r3, #14]
 800416e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	e06f      	b.n	8004256 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d011      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d00e      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b05      	cmp	r3, #5
 8004186:	d00b      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	2b07      	cmp	r3, #7
 800418c:	d008      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d005      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b0a      	cmp	r3, #10
 8004198:	d002      	beq.n	80041a0 <RTC_DateUpdate+0x5c>
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d117      	bne.n	80041d0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b1e      	cmp	r3, #30
 80041a4:	d803      	bhi.n	80041ae <RTC_DateUpdate+0x6a>
      {
        day++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80041ac:	e050      	b.n	8004250 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d005      	beq.n	80041c0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80041ba:	2301      	movs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80041be:	e047      	b.n	8004250 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80041c4:	2301      	movs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
          year++;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3301      	adds	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80041ce:	e03f      	b.n	8004250 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d008      	beq.n	80041e8 <RTC_DateUpdate+0xa4>
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2b06      	cmp	r3, #6
 80041da:	d005      	beq.n	80041e8 <RTC_DateUpdate+0xa4>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d002      	beq.n	80041e8 <RTC_DateUpdate+0xa4>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b0b      	cmp	r3, #11
 80041e6:	d10c      	bne.n	8004202 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2b1d      	cmp	r3, #29
 80041ec:	d803      	bhi.n	80041f6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80041f4:	e02c      	b.n	8004250 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3301      	adds	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
        day = 1U;
 80041fc:	2301      	movs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004200:	e026      	b.n	8004250 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d123      	bne.n	8004250 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b1b      	cmp	r3, #27
 800420c:	d803      	bhi.n	8004216 <RTC_DateUpdate+0xd2>
      {
        day++;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e01c      	b.n	8004250 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b1c      	cmp	r3, #28
 800421a:	d111      	bne.n	8004240 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	b29b      	uxth	r3, r3
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f839 	bl	8004298 <RTC_IsLeapYear>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <RTC_DateUpdate+0xf0>
        {
          day++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3301      	adds	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	e00d      	b.n	8004250 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3301      	adds	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
          day = 1U;
 800423a:	2301      	movs	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e007      	b.n	8004250 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b1d      	cmp	r3, #29
 8004244:	d104      	bne.n	8004250 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3301      	adds	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800424c:	2301      	movs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	3301      	adds	r3, #1
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d38b      	bcc.n	8004176 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	4619      	mov	r1, r3
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	f000 f83b 	bl	80042fc <RTC_WeekDayNum>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	731a      	strb	r2, [r3, #12]
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e01d      	b.n	80042ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	4a10      	ldr	r2, [pc, #64]	; (80042f8 <RTC_IsLeapYear+0x60>)
 80042b6:	fba2 1203 	umull	r1, r2, r2, r3
 80042ba:	0952      	lsrs	r2, r2, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f202 	mul.w	r2, r1, r2
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e00f      	b.n	80042ee <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <RTC_IsLeapYear+0x60>)
 80042d2:	fba2 1203 	umull	r1, r2, r2, r3
 80042d6:	09d2      	lsrs	r2, r2, #7
 80042d8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80042dc:	fb01 f202 	mul.w	r2, r1, r2
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80042ec:	2300      	movs	r3, #0
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	51eb851f 	.word	0x51eb851f

080042fc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
 8004308:	4613      	mov	r3, r2
 800430a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800431a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d82d      	bhi.n	800437e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <RTC_WeekDayNum+0xe4>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	085a      	lsrs	r2, r3, #1
 8004336:	78bb      	ldrb	r3, [r7, #2]
 8004338:	441a      	add	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	441a      	add	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3b01      	subs	r3, #1
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	3b01      	subs	r3, #1
 800434a:	4926      	ldr	r1, [pc, #152]	; (80043e4 <RTC_WeekDayNum+0xe8>)
 800434c:	fba1 1303 	umull	r1, r3, r1, r3
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	4922      	ldr	r1, [pc, #136]	; (80043e4 <RTC_WeekDayNum+0xe8>)
 800435a:	fba1 1303 	umull	r1, r3, r1, r3
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	4413      	add	r3, r2
 8004362:	1d1a      	adds	r2, r3, #4
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <RTC_WeekDayNum+0xec>)
 8004366:	fba3 1302 	umull	r1, r3, r3, r2
 800436a:	1ad1      	subs	r1, r2, r3
 800436c:	0849      	lsrs	r1, r1, #1
 800436e:	440b      	add	r3, r1
 8004370:	0899      	lsrs	r1, r3, #2
 8004372:	460b      	mov	r3, r1
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	1a5b      	subs	r3, r3, r1
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e029      	b.n	80043d2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	4a15      	ldr	r2, [pc, #84]	; (80043e0 <RTC_WeekDayNum+0xe4>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	085a      	lsrs	r2, r3, #1
 8004392:	78bb      	ldrb	r3, [r7, #2]
 8004394:	441a      	add	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	441a      	add	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4910      	ldr	r1, [pc, #64]	; (80043e4 <RTC_WeekDayNum+0xe8>)
 80043a4:	fba1 1303 	umull	r1, r3, r1, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	1ad2      	subs	r2, r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	490d      	ldr	r1, [pc, #52]	; (80043e4 <RTC_WeekDayNum+0xe8>)
 80043b0:	fba1 1303 	umull	r1, r3, r1, r3
 80043b4:	09db      	lsrs	r3, r3, #7
 80043b6:	4413      	add	r3, r2
 80043b8:	1c9a      	adds	r2, r3, #2
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <RTC_WeekDayNum+0xec>)
 80043bc:	fba3 1302 	umull	r1, r3, r3, r2
 80043c0:	1ad1      	subs	r1, r2, r3
 80043c2:	0849      	lsrs	r1, r1, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	0899      	lsrs	r1, r3, #2
 80043c8:	460b      	mov	r3, r1
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	1a5b      	subs	r3, r3, r1
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b2db      	uxtb	r3, r3
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	38e38e39 	.word	0x38e38e39
 80043e4:	51eb851f 	.word	0x51eb851f
 80043e8:	24924925 	.word	0x24924925

080043ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e076      	b.n	80044ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d009      	beq.n	8004424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	61da      	str	r2, [r3, #28]
 8004416:	e005      	b.n	8004424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fb8a 	bl	8001b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	0c1a      	lsrs	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f002 0204 	and.w	r2, r2, #4
 80044ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69da      	ldr	r2, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Transmit+0x22>
 8004512:	2302      	movs	r3, #2
 8004514:	e126      	b.n	8004764 <HAL_SPI_Transmit+0x270>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800451e:	f7fd fcdd 	bl	8001edc <HAL_GetTick>
 8004522:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	d002      	beq.n	800453a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004534:	2302      	movs	r3, #2
 8004536:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004538:	e10b      	b.n	8004752 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_SPI_Transmit+0x52>
 8004540:	88fb      	ldrh	r3, [r7, #6]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	77fb      	strb	r3, [r7, #31]
    goto error;
 800454a:	e102      	b.n	8004752 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2203      	movs	r2, #3
 8004550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004592:	d10f      	bne.n	80045b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d007      	beq.n	80045d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045da:	d14b      	bne.n	8004674 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SPI_Transmit+0xf6>
 80045e4:	8afb      	ldrh	r3, [r7, #22]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d13e      	bne.n	8004668 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800460e:	e02b      	b.n	8004668 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d112      	bne.n	8004644 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	881a      	ldrh	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	1c9a      	adds	r2, r3, #2
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	86da      	strh	r2, [r3, #54]	; 0x36
 8004642:	e011      	b.n	8004668 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004644:	f7fd fc4a 	bl	8001edc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d803      	bhi.n	800465c <HAL_SPI_Transmit+0x168>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d102      	bne.n	8004662 <HAL_SPI_Transmit+0x16e>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004666:	e074      	b.n	8004752 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1ce      	bne.n	8004610 <HAL_SPI_Transmit+0x11c>
 8004672:	e04c      	b.n	800470e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_SPI_Transmit+0x18e>
 800467c:	8afb      	ldrh	r3, [r7, #22]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d140      	bne.n	8004704 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	7812      	ldrb	r2, [r2, #0]
 800468e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046a8:	e02c      	b.n	8004704 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d113      	bne.n	80046e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	7812      	ldrb	r2, [r2, #0]
 80046c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80046de:	e011      	b.n	8004704 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e0:	f7fd fbfc 	bl	8001edc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d803      	bhi.n	80046f8 <HAL_SPI_Transmit+0x204>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d102      	bne.n	80046fe <HAL_SPI_Transmit+0x20a>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004702:	e026      	b.n	8004752 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1cd      	bne.n	80046aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8b2 	bl	800487c <SPI_EndRxTxTransaction>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e000      	b.n	8004752 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004750:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004762:	7ffb      	ldrb	r3, [r7, #31]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800477c:	f7fd fbae 	bl	8001edc <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4413      	add	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800478c:	f7fd fba6 	bl	8001edc <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	0d1b      	lsrs	r3, r3, #20
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	e054      	b.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d050      	beq.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ac:	f7fd fb96 	bl	8001edc <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d902      	bls.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13d      	bne.n	800483e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d111      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e4:	d004      	beq.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d107      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d10f      	bne.n	800482a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e017      	b.n	800486e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d19b      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000008 	.word	0x20000008

0800487c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff ff6a 	bl	800476c <SPI_WaitFlagStateUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e000      	b.n	80048b0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e041      	b.n	800494e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fd fa60 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3304      	adds	r3, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f000 f8f2 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_TIM_ConfigClockSource+0x18>
 800496a:	2302      	movs	r3, #2
 800496c:	e0b3      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x180>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800498c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004994:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	d03e      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xd0>
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ac:	f200 8087 	bhi.w	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	f000 8085 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d87f      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049be:	2b70      	cmp	r3, #112	; 0x70
 80049c0:	d01a      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0xa2>
 80049c2:	2b70      	cmp	r3, #112	; 0x70
 80049c4:	d87b      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049c6:	2b60      	cmp	r3, #96	; 0x60
 80049c8:	d050      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0x116>
 80049ca:	2b60      	cmp	r3, #96	; 0x60
 80049cc:	d877      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049ce:	2b50      	cmp	r3, #80	; 0x50
 80049d0:	d03c      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xf6>
 80049d2:	2b50      	cmp	r3, #80	; 0x50
 80049d4:	d873      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d058      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x136>
 80049da:	2b40      	cmp	r3, #64	; 0x40
 80049dc:	d86f      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d064      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x156>
 80049e2:	2b30      	cmp	r3, #48	; 0x30
 80049e4:	d86b      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d060      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x156>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d867      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05c      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x156>
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d05a      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049f6:	e062      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f000 f95b 	bl	8004cc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	609a      	str	r2, [r3, #8]
      break;
 8004a24:	e04e      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f000 f944 	bl	8004cc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e03b      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f000 f8bb 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2150      	movs	r1, #80	; 0x50
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f912 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e02b      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f000 f8d9 	bl	8004c30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2160      	movs	r1, #96	; 0x60
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f902 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e01b      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f000 f89b 	bl	8004bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2140      	movs	r1, #64	; 0x40
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f8f2 	bl	8004c8e <TIM_ITRx_SetConfig>
      break;
 8004aaa:	e00b      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 f8e9 	bl	8004c8e <TIM_ITRx_SetConfig>
        break;
 8004abc:	e002      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a33      	ldr	r2, [pc, #204]	; (8004bc0 <TIM_Base_SetConfig+0xe0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a32      	ldr	r2, [pc, #200]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	; (8004bc8 <TIM_Base_SetConfig+0xe8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a2e      	ldr	r2, [pc, #184]	; (8004bcc <TIM_Base_SetConfig+0xec>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2d      	ldr	r2, [pc, #180]	; (8004bd0 <TIM_Base_SetConfig+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <TIM_Base_SetConfig+0xe0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <TIM_Base_SetConfig+0x82>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00f      	beq.n	8004b62 <TIM_Base_SetConfig+0x82>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d00b      	beq.n	8004b62 <TIM_Base_SetConfig+0x82>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <TIM_Base_SetConfig+0xe8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <TIM_Base_SetConfig+0x82>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <TIM_Base_SetConfig+0xec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_Base_SetConfig+0x82>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <TIM_Base_SetConfig+0xf0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <TIM_Base_SetConfig+0xe0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0xc8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <TIM_Base_SetConfig+0xe4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d103      	bne.n	8004bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40013400 	.word	0x40013400
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00

08004bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0201 	bic.w	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 030a 	bic.w	r3, r3, #10
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr

08004c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 0210 	bic.w	r2, r3, #16
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	031b      	lsls	r3, r3, #12
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f043 0307 	orr.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	609a      	str	r2, [r3, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr

08004cc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b087      	sub	sp, #28
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	021a      	lsls	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	609a      	str	r2, [r3, #8]
}
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e050      	b.n	8004dba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1b      	ldr	r2, [pc, #108]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d018      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d10c      	bne.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	40012c00 	.word	0x40012c00
 8004dc8:	40013400 	.word	0x40013400
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000014 	.word	0x20000014

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	2600      	movs	r6, #0
 8004de8:	4d0c      	ldr	r5, [pc, #48]	; (8004e1c <__libc_init_array+0x38>)
 8004dea:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	f000 fc70 	bl	80056d8 <_init>
 8004df8:	2600      	movs	r6, #0
 8004dfa:	4d0a      	ldr	r5, [pc, #40]	; (8004e24 <__libc_init_array+0x40>)
 8004dfc:	4c0a      	ldr	r4, [pc, #40]	; (8004e28 <__libc_init_array+0x44>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	0800f2e8 	.word	0x0800f2e8
 8004e20:	0800f2e8 	.word	0x0800f2e8
 8004e24:	0800f2e8 	.word	0x0800f2e8
 8004e28:	0800f2ec 	.word	0x0800f2ec

08004e2c <memset>:
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4402      	add	r2, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <sniprintf>:
 8004e3c:	b40c      	push	{r2, r3}
 8004e3e:	b530      	push	{r4, r5, lr}
 8004e40:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <sniprintf+0x64>)
 8004e42:	1e0c      	subs	r4, r1, #0
 8004e44:	681d      	ldr	r5, [r3, #0]
 8004e46:	b09d      	sub	sp, #116	; 0x74
 8004e48:	da08      	bge.n	8004e5c <sniprintf+0x20>
 8004e4a:	238b      	movs	r3, #139	; 0x8b
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	602b      	str	r3, [r5, #0]
 8004e52:	b01d      	add	sp, #116	; 0x74
 8004e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e58:	b002      	add	sp, #8
 8004e5a:	4770      	bx	lr
 8004e5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004e60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004e64:	bf0c      	ite	eq
 8004e66:	4623      	moveq	r3, r4
 8004e68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e6c:	9304      	str	r3, [sp, #16]
 8004e6e:	9307      	str	r3, [sp, #28]
 8004e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e74:	9002      	str	r0, [sp, #8]
 8004e76:	9006      	str	r0, [sp, #24]
 8004e78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	ab21      	add	r3, sp, #132	; 0x84
 8004e80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e82:	a902      	add	r1, sp, #8
 8004e84:	9301      	str	r3, [sp, #4]
 8004e86:	f000 f869 	bl	8004f5c <_svfiprintf_r>
 8004e8a:	1c43      	adds	r3, r0, #1
 8004e8c:	bfbc      	itt	lt
 8004e8e:	238b      	movlt	r3, #139	; 0x8b
 8004e90:	602b      	strlt	r3, [r5, #0]
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	d0dd      	beq.n	8004e52 <sniprintf+0x16>
 8004e96:	2200      	movs	r2, #0
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e7d9      	b.n	8004e52 <sniprintf+0x16>
 8004e9e:	bf00      	nop
 8004ea0:	20000014 	.word	0x20000014

08004ea4 <__ssputs_r>:
 8004ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	688e      	ldr	r6, [r1, #8]
 8004eaa:	4682      	mov	sl, r0
 8004eac:	429e      	cmp	r6, r3
 8004eae:	460c      	mov	r4, r1
 8004eb0:	4690      	mov	r8, r2
 8004eb2:	461f      	mov	r7, r3
 8004eb4:	d838      	bhi.n	8004f28 <__ssputs_r+0x84>
 8004eb6:	898a      	ldrh	r2, [r1, #12]
 8004eb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ebc:	d032      	beq.n	8004f24 <__ssputs_r+0x80>
 8004ebe:	6825      	ldr	r5, [r4, #0]
 8004ec0:	6909      	ldr	r1, [r1, #16]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	eba5 0901 	sub.w	r9, r5, r1
 8004ec8:	6965      	ldr	r5, [r4, #20]
 8004eca:	444b      	add	r3, r9
 8004ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ed0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ed4:	106d      	asrs	r5, r5, #1
 8004ed6:	429d      	cmp	r5, r3
 8004ed8:	bf38      	it	cc
 8004eda:	461d      	movcc	r5, r3
 8004edc:	0553      	lsls	r3, r2, #21
 8004ede:	d531      	bpl.n	8004f44 <__ssputs_r+0xa0>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	f000 fb53 	bl	800558c <_malloc_r>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	b950      	cbnz	r0, 8004f00 <__ssputs_r+0x5c>
 8004eea:	230c      	movs	r3, #12
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	464a      	mov	r2, r9
 8004f02:	6921      	ldr	r1, [r4, #16]
 8004f04:	f000 face 	bl	80054a4 <memcpy>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	6126      	str	r6, [r4, #16]
 8004f16:	444e      	add	r6, r9
 8004f18:	6026      	str	r6, [r4, #0]
 8004f1a:	463e      	mov	r6, r7
 8004f1c:	6165      	str	r5, [r4, #20]
 8004f1e:	eba5 0509 	sub.w	r5, r5, r9
 8004f22:	60a5      	str	r5, [r4, #8]
 8004f24:	42be      	cmp	r6, r7
 8004f26:	d900      	bls.n	8004f2a <__ssputs_r+0x86>
 8004f28:	463e      	mov	r6, r7
 8004f2a:	4632      	mov	r2, r6
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	f000 fac6 	bl	80054c0 <memmove>
 8004f34:	68a3      	ldr	r3, [r4, #8]
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	1b9b      	subs	r3, r3, r6
 8004f3a:	4432      	add	r2, r6
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	60a3      	str	r3, [r4, #8]
 8004f40:	6022      	str	r2, [r4, #0]
 8004f42:	e7db      	b.n	8004efc <__ssputs_r+0x58>
 8004f44:	462a      	mov	r2, r5
 8004f46:	f000 fb7b 	bl	8005640 <_realloc_r>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d1e1      	bne.n	8004f14 <__ssputs_r+0x70>
 8004f50:	4650      	mov	r0, sl
 8004f52:	6921      	ldr	r1, [r4, #16]
 8004f54:	f000 face 	bl	80054f4 <_free_r>
 8004f58:	e7c7      	b.n	8004eea <__ssputs_r+0x46>
	...

08004f5c <_svfiprintf_r>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	4698      	mov	r8, r3
 8004f62:	898b      	ldrh	r3, [r1, #12]
 8004f64:	4607      	mov	r7, r0
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	460d      	mov	r5, r1
 8004f6a:	4614      	mov	r4, r2
 8004f6c:	b09d      	sub	sp, #116	; 0x74
 8004f6e:	d50e      	bpl.n	8004f8e <_svfiprintf_r+0x32>
 8004f70:	690b      	ldr	r3, [r1, #16]
 8004f72:	b963      	cbnz	r3, 8004f8e <_svfiprintf_r+0x32>
 8004f74:	2140      	movs	r1, #64	; 0x40
 8004f76:	f000 fb09 	bl	800558c <_malloc_r>
 8004f7a:	6028      	str	r0, [r5, #0]
 8004f7c:	6128      	str	r0, [r5, #16]
 8004f7e:	b920      	cbnz	r0, 8004f8a <_svfiprintf_r+0x2e>
 8004f80:	230c      	movs	r3, #12
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e0d1      	b.n	800512e <_svfiprintf_r+0x1d2>
 8004f8a:	2340      	movs	r3, #64	; 0x40
 8004f8c:	616b      	str	r3, [r5, #20]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
 8004f92:	2320      	movs	r3, #32
 8004f94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f98:	2330      	movs	r3, #48	; 0x30
 8004f9a:	f04f 0901 	mov.w	r9, #1
 8004f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fa2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005148 <_svfiprintf_r+0x1ec>
 8004fa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004faa:	4623      	mov	r3, r4
 8004fac:	469a      	mov	sl, r3
 8004fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fb2:	b10a      	cbz	r2, 8004fb8 <_svfiprintf_r+0x5c>
 8004fb4:	2a25      	cmp	r2, #37	; 0x25
 8004fb6:	d1f9      	bne.n	8004fac <_svfiprintf_r+0x50>
 8004fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004fbc:	d00b      	beq.n	8004fd6 <_svfiprintf_r+0x7a>
 8004fbe:	465b      	mov	r3, fp
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f7ff ff6d 	bl	8004ea4 <__ssputs_r>
 8004fca:	3001      	adds	r0, #1
 8004fcc:	f000 80aa 	beq.w	8005124 <_svfiprintf_r+0x1c8>
 8004fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd2:	445a      	add	r2, fp
 8004fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80a2 	beq.w	8005124 <_svfiprintf_r+0x1c8>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fea:	f10a 0a01 	add.w	sl, sl, #1
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	9307      	str	r3, [sp, #28]
 8004ff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ff6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ff8:	4654      	mov	r4, sl
 8004ffa:	2205      	movs	r2, #5
 8004ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005000:	4851      	ldr	r0, [pc, #324]	; (8005148 <_svfiprintf_r+0x1ec>)
 8005002:	f000 fa41 	bl	8005488 <memchr>
 8005006:	9a04      	ldr	r2, [sp, #16]
 8005008:	b9d8      	cbnz	r0, 8005042 <_svfiprintf_r+0xe6>
 800500a:	06d0      	lsls	r0, r2, #27
 800500c:	bf44      	itt	mi
 800500e:	2320      	movmi	r3, #32
 8005010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005014:	0711      	lsls	r1, r2, #28
 8005016:	bf44      	itt	mi
 8005018:	232b      	movmi	r3, #43	; 0x2b
 800501a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800501e:	f89a 3000 	ldrb.w	r3, [sl]
 8005022:	2b2a      	cmp	r3, #42	; 0x2a
 8005024:	d015      	beq.n	8005052 <_svfiprintf_r+0xf6>
 8005026:	4654      	mov	r4, sl
 8005028:	2000      	movs	r0, #0
 800502a:	f04f 0c0a 	mov.w	ip, #10
 800502e:	9a07      	ldr	r2, [sp, #28]
 8005030:	4621      	mov	r1, r4
 8005032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005036:	3b30      	subs	r3, #48	; 0x30
 8005038:	2b09      	cmp	r3, #9
 800503a:	d94e      	bls.n	80050da <_svfiprintf_r+0x17e>
 800503c:	b1b0      	cbz	r0, 800506c <_svfiprintf_r+0x110>
 800503e:	9207      	str	r2, [sp, #28]
 8005040:	e014      	b.n	800506c <_svfiprintf_r+0x110>
 8005042:	eba0 0308 	sub.w	r3, r0, r8
 8005046:	fa09 f303 	lsl.w	r3, r9, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	46a2      	mov	sl, r4
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	e7d2      	b.n	8004ff8 <_svfiprintf_r+0x9c>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	1d19      	adds	r1, r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	9103      	str	r1, [sp, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	bfbb      	ittet	lt
 800505e:	425b      	neglt	r3, r3
 8005060:	f042 0202 	orrlt.w	r2, r2, #2
 8005064:	9307      	strge	r3, [sp, #28]
 8005066:	9307      	strlt	r3, [sp, #28]
 8005068:	bfb8      	it	lt
 800506a:	9204      	strlt	r2, [sp, #16]
 800506c:	7823      	ldrb	r3, [r4, #0]
 800506e:	2b2e      	cmp	r3, #46	; 0x2e
 8005070:	d10c      	bne.n	800508c <_svfiprintf_r+0x130>
 8005072:	7863      	ldrb	r3, [r4, #1]
 8005074:	2b2a      	cmp	r3, #42	; 0x2a
 8005076:	d135      	bne.n	80050e4 <_svfiprintf_r+0x188>
 8005078:	9b03      	ldr	r3, [sp, #12]
 800507a:	3402      	adds	r4, #2
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	9203      	str	r2, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfb8      	it	lt
 8005086:	f04f 33ff 	movlt.w	r3, #4294967295
 800508a:	9305      	str	r3, [sp, #20]
 800508c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005158 <_svfiprintf_r+0x1fc>
 8005090:	2203      	movs	r2, #3
 8005092:	4650      	mov	r0, sl
 8005094:	7821      	ldrb	r1, [r4, #0]
 8005096:	f000 f9f7 	bl	8005488 <memchr>
 800509a:	b140      	cbz	r0, 80050ae <_svfiprintf_r+0x152>
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	eba0 000a 	sub.w	r0, r0, sl
 80050a2:	fa03 f000 	lsl.w	r0, r3, r0
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	3401      	adds	r4, #1
 80050aa:	4303      	orrs	r3, r0
 80050ac:	9304      	str	r3, [sp, #16]
 80050ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050b2:	2206      	movs	r2, #6
 80050b4:	4825      	ldr	r0, [pc, #148]	; (800514c <_svfiprintf_r+0x1f0>)
 80050b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050ba:	f000 f9e5 	bl	8005488 <memchr>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d038      	beq.n	8005134 <_svfiprintf_r+0x1d8>
 80050c2:	4b23      	ldr	r3, [pc, #140]	; (8005150 <_svfiprintf_r+0x1f4>)
 80050c4:	bb1b      	cbnz	r3, 800510e <_svfiprintf_r+0x1b2>
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	3307      	adds	r3, #7
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	3308      	adds	r3, #8
 80050d0:	9303      	str	r3, [sp, #12]
 80050d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d4:	4433      	add	r3, r6
 80050d6:	9309      	str	r3, [sp, #36]	; 0x24
 80050d8:	e767      	b.n	8004faa <_svfiprintf_r+0x4e>
 80050da:	460c      	mov	r4, r1
 80050dc:	2001      	movs	r0, #1
 80050de:	fb0c 3202 	mla	r2, ip, r2, r3
 80050e2:	e7a5      	b.n	8005030 <_svfiprintf_r+0xd4>
 80050e4:	2300      	movs	r3, #0
 80050e6:	f04f 0c0a 	mov.w	ip, #10
 80050ea:	4619      	mov	r1, r3
 80050ec:	3401      	adds	r4, #1
 80050ee:	9305      	str	r3, [sp, #20]
 80050f0:	4620      	mov	r0, r4
 80050f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050f6:	3a30      	subs	r2, #48	; 0x30
 80050f8:	2a09      	cmp	r2, #9
 80050fa:	d903      	bls.n	8005104 <_svfiprintf_r+0x1a8>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0c5      	beq.n	800508c <_svfiprintf_r+0x130>
 8005100:	9105      	str	r1, [sp, #20]
 8005102:	e7c3      	b.n	800508c <_svfiprintf_r+0x130>
 8005104:	4604      	mov	r4, r0
 8005106:	2301      	movs	r3, #1
 8005108:	fb0c 2101 	mla	r1, ip, r1, r2
 800510c:	e7f0      	b.n	80050f0 <_svfiprintf_r+0x194>
 800510e:	ab03      	add	r3, sp, #12
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	462a      	mov	r2, r5
 8005114:	4638      	mov	r0, r7
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <_svfiprintf_r+0x1f8>)
 8005118:	a904      	add	r1, sp, #16
 800511a:	f3af 8000 	nop.w
 800511e:	1c42      	adds	r2, r0, #1
 8005120:	4606      	mov	r6, r0
 8005122:	d1d6      	bne.n	80050d2 <_svfiprintf_r+0x176>
 8005124:	89ab      	ldrh	r3, [r5, #12]
 8005126:	065b      	lsls	r3, r3, #25
 8005128:	f53f af2c 	bmi.w	8004f84 <_svfiprintf_r+0x28>
 800512c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800512e:	b01d      	add	sp, #116	; 0x74
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	ab03      	add	r3, sp, #12
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	462a      	mov	r2, r5
 800513a:	4638      	mov	r0, r7
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <_svfiprintf_r+0x1f8>)
 800513e:	a904      	add	r1, sp, #16
 8005140:	f000 f87c 	bl	800523c <_printf_i>
 8005144:	e7eb      	b.n	800511e <_svfiprintf_r+0x1c2>
 8005146:	bf00      	nop
 8005148:	0800f2b4 	.word	0x0800f2b4
 800514c:	0800f2be 	.word	0x0800f2be
 8005150:	00000000 	.word	0x00000000
 8005154:	08004ea5 	.word	0x08004ea5
 8005158:	0800f2ba 	.word	0x0800f2ba

0800515c <_printf_common>:
 800515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005160:	4616      	mov	r6, r2
 8005162:	4699      	mov	r9, r3
 8005164:	688a      	ldr	r2, [r1, #8]
 8005166:	690b      	ldr	r3, [r1, #16]
 8005168:	4607      	mov	r7, r0
 800516a:	4293      	cmp	r3, r2
 800516c:	bfb8      	it	lt
 800516e:	4613      	movlt	r3, r2
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005176:	460c      	mov	r4, r1
 8005178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800517c:	b10a      	cbz	r2, 8005182 <_printf_common+0x26>
 800517e:	3301      	adds	r3, #1
 8005180:	6033      	str	r3, [r6, #0]
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	0699      	lsls	r1, r3, #26
 8005186:	bf42      	ittt	mi
 8005188:	6833      	ldrmi	r3, [r6, #0]
 800518a:	3302      	addmi	r3, #2
 800518c:	6033      	strmi	r3, [r6, #0]
 800518e:	6825      	ldr	r5, [r4, #0]
 8005190:	f015 0506 	ands.w	r5, r5, #6
 8005194:	d106      	bne.n	80051a4 <_printf_common+0x48>
 8005196:	f104 0a19 	add.w	sl, r4, #25
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	6832      	ldr	r2, [r6, #0]
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	42ab      	cmp	r3, r5
 80051a2:	dc28      	bgt.n	80051f6 <_printf_common+0x9a>
 80051a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051a8:	1e13      	subs	r3, r2, #0
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	bf18      	it	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	0692      	lsls	r2, r2, #26
 80051b2:	d42d      	bmi.n	8005210 <_printf_common+0xb4>
 80051b4:	4649      	mov	r1, r9
 80051b6:	4638      	mov	r0, r7
 80051b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051bc:	47c0      	blx	r8
 80051be:	3001      	adds	r0, #1
 80051c0:	d020      	beq.n	8005204 <_printf_common+0xa8>
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	68e5      	ldr	r5, [r4, #12]
 80051c6:	f003 0306 	and.w	r3, r3, #6
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	bf18      	it	ne
 80051ce:	2500      	movne	r5, #0
 80051d0:	6832      	ldr	r2, [r6, #0]
 80051d2:	f04f 0600 	mov.w	r6, #0
 80051d6:	68a3      	ldr	r3, [r4, #8]
 80051d8:	bf08      	it	eq
 80051da:	1aad      	subeq	r5, r5, r2
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	bf08      	it	eq
 80051e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e4:	4293      	cmp	r3, r2
 80051e6:	bfc4      	itt	gt
 80051e8:	1a9b      	subgt	r3, r3, r2
 80051ea:	18ed      	addgt	r5, r5, r3
 80051ec:	341a      	adds	r4, #26
 80051ee:	42b5      	cmp	r5, r6
 80051f0:	d11a      	bne.n	8005228 <_printf_common+0xcc>
 80051f2:	2000      	movs	r0, #0
 80051f4:	e008      	b.n	8005208 <_printf_common+0xac>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4649      	mov	r1, r9
 80051fc:	4638      	mov	r0, r7
 80051fe:	47c0      	blx	r8
 8005200:	3001      	adds	r0, #1
 8005202:	d103      	bne.n	800520c <_printf_common+0xb0>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	3501      	adds	r5, #1
 800520e:	e7c4      	b.n	800519a <_printf_common+0x3e>
 8005210:	2030      	movs	r0, #48	; 0x30
 8005212:	18e1      	adds	r1, r4, r3
 8005214:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800521e:	4422      	add	r2, r4
 8005220:	3302      	adds	r3, #2
 8005222:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005226:	e7c5      	b.n	80051b4 <_printf_common+0x58>
 8005228:	2301      	movs	r3, #1
 800522a:	4622      	mov	r2, r4
 800522c:	4649      	mov	r1, r9
 800522e:	4638      	mov	r0, r7
 8005230:	47c0      	blx	r8
 8005232:	3001      	adds	r0, #1
 8005234:	d0e6      	beq.n	8005204 <_printf_common+0xa8>
 8005236:	3601      	adds	r6, #1
 8005238:	e7d9      	b.n	80051ee <_printf_common+0x92>
	...

0800523c <_printf_i>:
 800523c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	460c      	mov	r4, r1
 8005242:	7e27      	ldrb	r7, [r4, #24]
 8005244:	4691      	mov	r9, r2
 8005246:	2f78      	cmp	r7, #120	; 0x78
 8005248:	4680      	mov	r8, r0
 800524a:	469a      	mov	sl, r3
 800524c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800524e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005252:	d807      	bhi.n	8005264 <_printf_i+0x28>
 8005254:	2f62      	cmp	r7, #98	; 0x62
 8005256:	d80a      	bhi.n	800526e <_printf_i+0x32>
 8005258:	2f00      	cmp	r7, #0
 800525a:	f000 80d9 	beq.w	8005410 <_printf_i+0x1d4>
 800525e:	2f58      	cmp	r7, #88	; 0x58
 8005260:	f000 80a4 	beq.w	80053ac <_printf_i+0x170>
 8005264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800526c:	e03a      	b.n	80052e4 <_printf_i+0xa8>
 800526e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005272:	2b15      	cmp	r3, #21
 8005274:	d8f6      	bhi.n	8005264 <_printf_i+0x28>
 8005276:	a001      	add	r0, pc, #4	; (adr r0, 800527c <_printf_i+0x40>)
 8005278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800527c:	080052d5 	.word	0x080052d5
 8005280:	080052e9 	.word	0x080052e9
 8005284:	08005265 	.word	0x08005265
 8005288:	08005265 	.word	0x08005265
 800528c:	08005265 	.word	0x08005265
 8005290:	08005265 	.word	0x08005265
 8005294:	080052e9 	.word	0x080052e9
 8005298:	08005265 	.word	0x08005265
 800529c:	08005265 	.word	0x08005265
 80052a0:	08005265 	.word	0x08005265
 80052a4:	08005265 	.word	0x08005265
 80052a8:	080053f7 	.word	0x080053f7
 80052ac:	08005319 	.word	0x08005319
 80052b0:	080053d9 	.word	0x080053d9
 80052b4:	08005265 	.word	0x08005265
 80052b8:	08005265 	.word	0x08005265
 80052bc:	08005419 	.word	0x08005419
 80052c0:	08005265 	.word	0x08005265
 80052c4:	08005319 	.word	0x08005319
 80052c8:	08005265 	.word	0x08005265
 80052cc:	08005265 	.word	0x08005265
 80052d0:	080053e1 	.word	0x080053e1
 80052d4:	680b      	ldr	r3, [r1, #0]
 80052d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	600a      	str	r2, [r1, #0]
 80052e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0a4      	b.n	8005432 <_printf_i+0x1f6>
 80052e8:	6825      	ldr	r5, [r4, #0]
 80052ea:	6808      	ldr	r0, [r1, #0]
 80052ec:	062e      	lsls	r6, r5, #24
 80052ee:	f100 0304 	add.w	r3, r0, #4
 80052f2:	d50a      	bpl.n	800530a <_printf_i+0xce>
 80052f4:	6805      	ldr	r5, [r0, #0]
 80052f6:	600b      	str	r3, [r1, #0]
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	da03      	bge.n	8005304 <_printf_i+0xc8>
 80052fc:	232d      	movs	r3, #45	; 0x2d
 80052fe:	426d      	negs	r5, r5
 8005300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005304:	230a      	movs	r3, #10
 8005306:	485e      	ldr	r0, [pc, #376]	; (8005480 <_printf_i+0x244>)
 8005308:	e019      	b.n	800533e <_printf_i+0x102>
 800530a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800530e:	6805      	ldr	r5, [r0, #0]
 8005310:	600b      	str	r3, [r1, #0]
 8005312:	bf18      	it	ne
 8005314:	b22d      	sxthne	r5, r5
 8005316:	e7ef      	b.n	80052f8 <_printf_i+0xbc>
 8005318:	680b      	ldr	r3, [r1, #0]
 800531a:	6825      	ldr	r5, [r4, #0]
 800531c:	1d18      	adds	r0, r3, #4
 800531e:	6008      	str	r0, [r1, #0]
 8005320:	0628      	lsls	r0, r5, #24
 8005322:	d501      	bpl.n	8005328 <_printf_i+0xec>
 8005324:	681d      	ldr	r5, [r3, #0]
 8005326:	e002      	b.n	800532e <_printf_i+0xf2>
 8005328:	0669      	lsls	r1, r5, #25
 800532a:	d5fb      	bpl.n	8005324 <_printf_i+0xe8>
 800532c:	881d      	ldrh	r5, [r3, #0]
 800532e:	2f6f      	cmp	r7, #111	; 0x6f
 8005330:	bf0c      	ite	eq
 8005332:	2308      	moveq	r3, #8
 8005334:	230a      	movne	r3, #10
 8005336:	4852      	ldr	r0, [pc, #328]	; (8005480 <_printf_i+0x244>)
 8005338:	2100      	movs	r1, #0
 800533a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800533e:	6866      	ldr	r6, [r4, #4]
 8005340:	2e00      	cmp	r6, #0
 8005342:	bfa8      	it	ge
 8005344:	6821      	ldrge	r1, [r4, #0]
 8005346:	60a6      	str	r6, [r4, #8]
 8005348:	bfa4      	itt	ge
 800534a:	f021 0104 	bicge.w	r1, r1, #4
 800534e:	6021      	strge	r1, [r4, #0]
 8005350:	b90d      	cbnz	r5, 8005356 <_printf_i+0x11a>
 8005352:	2e00      	cmp	r6, #0
 8005354:	d04d      	beq.n	80053f2 <_printf_i+0x1b6>
 8005356:	4616      	mov	r6, r2
 8005358:	fbb5 f1f3 	udiv	r1, r5, r3
 800535c:	fb03 5711 	mls	r7, r3, r1, r5
 8005360:	5dc7      	ldrb	r7, [r0, r7]
 8005362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005366:	462f      	mov	r7, r5
 8005368:	42bb      	cmp	r3, r7
 800536a:	460d      	mov	r5, r1
 800536c:	d9f4      	bls.n	8005358 <_printf_i+0x11c>
 800536e:	2b08      	cmp	r3, #8
 8005370:	d10b      	bne.n	800538a <_printf_i+0x14e>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	07df      	lsls	r7, r3, #31
 8005376:	d508      	bpl.n	800538a <_printf_i+0x14e>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	6861      	ldr	r1, [r4, #4]
 800537c:	4299      	cmp	r1, r3
 800537e:	bfde      	ittt	le
 8005380:	2330      	movle	r3, #48	; 0x30
 8005382:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005386:	f106 36ff 	addle.w	r6, r6, #4294967295
 800538a:	1b92      	subs	r2, r2, r6
 800538c:	6122      	str	r2, [r4, #16]
 800538e:	464b      	mov	r3, r9
 8005390:	4621      	mov	r1, r4
 8005392:	4640      	mov	r0, r8
 8005394:	f8cd a000 	str.w	sl, [sp]
 8005398:	aa03      	add	r2, sp, #12
 800539a:	f7ff fedf 	bl	800515c <_printf_common>
 800539e:	3001      	adds	r0, #1
 80053a0:	d14c      	bne.n	800543c <_printf_i+0x200>
 80053a2:	f04f 30ff 	mov.w	r0, #4294967295
 80053a6:	b004      	add	sp, #16
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ac:	4834      	ldr	r0, [pc, #208]	; (8005480 <_printf_i+0x244>)
 80053ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053b2:	680e      	ldr	r6, [r1, #0]
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80053ba:	061f      	lsls	r7, r3, #24
 80053bc:	600e      	str	r6, [r1, #0]
 80053be:	d514      	bpl.n	80053ea <_printf_i+0x1ae>
 80053c0:	07d9      	lsls	r1, r3, #31
 80053c2:	bf44      	itt	mi
 80053c4:	f043 0320 	orrmi.w	r3, r3, #32
 80053c8:	6023      	strmi	r3, [r4, #0]
 80053ca:	b91d      	cbnz	r5, 80053d4 <_printf_i+0x198>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	f023 0320 	bic.w	r3, r3, #32
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	2310      	movs	r3, #16
 80053d6:	e7af      	b.n	8005338 <_printf_i+0xfc>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	f043 0320 	orr.w	r3, r3, #32
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	2378      	movs	r3, #120	; 0x78
 80053e2:	4828      	ldr	r0, [pc, #160]	; (8005484 <_printf_i+0x248>)
 80053e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053e8:	e7e3      	b.n	80053b2 <_printf_i+0x176>
 80053ea:	065e      	lsls	r6, r3, #25
 80053ec:	bf48      	it	mi
 80053ee:	b2ad      	uxthmi	r5, r5
 80053f0:	e7e6      	b.n	80053c0 <_printf_i+0x184>
 80053f2:	4616      	mov	r6, r2
 80053f4:	e7bb      	b.n	800536e <_printf_i+0x132>
 80053f6:	680b      	ldr	r3, [r1, #0]
 80053f8:	6826      	ldr	r6, [r4, #0]
 80053fa:	1d1d      	adds	r5, r3, #4
 80053fc:	6960      	ldr	r0, [r4, #20]
 80053fe:	600d      	str	r5, [r1, #0]
 8005400:	0635      	lsls	r5, r6, #24
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	d501      	bpl.n	800540a <_printf_i+0x1ce>
 8005406:	6018      	str	r0, [r3, #0]
 8005408:	e002      	b.n	8005410 <_printf_i+0x1d4>
 800540a:	0671      	lsls	r1, r6, #25
 800540c:	d5fb      	bpl.n	8005406 <_printf_i+0x1ca>
 800540e:	8018      	strh	r0, [r3, #0]
 8005410:	2300      	movs	r3, #0
 8005412:	4616      	mov	r6, r2
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	e7ba      	b.n	800538e <_printf_i+0x152>
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	600a      	str	r2, [r1, #0]
 800541e:	681e      	ldr	r6, [r3, #0]
 8005420:	2100      	movs	r1, #0
 8005422:	4630      	mov	r0, r6
 8005424:	6862      	ldr	r2, [r4, #4]
 8005426:	f000 f82f 	bl	8005488 <memchr>
 800542a:	b108      	cbz	r0, 8005430 <_printf_i+0x1f4>
 800542c:	1b80      	subs	r0, r0, r6
 800542e:	6060      	str	r0, [r4, #4]
 8005430:	6863      	ldr	r3, [r4, #4]
 8005432:	6123      	str	r3, [r4, #16]
 8005434:	2300      	movs	r3, #0
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543a:	e7a8      	b.n	800538e <_printf_i+0x152>
 800543c:	4632      	mov	r2, r6
 800543e:	4649      	mov	r1, r9
 8005440:	4640      	mov	r0, r8
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	47d0      	blx	sl
 8005446:	3001      	adds	r0, #1
 8005448:	d0ab      	beq.n	80053a2 <_printf_i+0x166>
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	079b      	lsls	r3, r3, #30
 800544e:	d413      	bmi.n	8005478 <_printf_i+0x23c>
 8005450:	68e0      	ldr	r0, [r4, #12]
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	4298      	cmp	r0, r3
 8005456:	bfb8      	it	lt
 8005458:	4618      	movlt	r0, r3
 800545a:	e7a4      	b.n	80053a6 <_printf_i+0x16a>
 800545c:	2301      	movs	r3, #1
 800545e:	4632      	mov	r2, r6
 8005460:	4649      	mov	r1, r9
 8005462:	4640      	mov	r0, r8
 8005464:	47d0      	blx	sl
 8005466:	3001      	adds	r0, #1
 8005468:	d09b      	beq.n	80053a2 <_printf_i+0x166>
 800546a:	3501      	adds	r5, #1
 800546c:	68e3      	ldr	r3, [r4, #12]
 800546e:	9903      	ldr	r1, [sp, #12]
 8005470:	1a5b      	subs	r3, r3, r1
 8005472:	42ab      	cmp	r3, r5
 8005474:	dcf2      	bgt.n	800545c <_printf_i+0x220>
 8005476:	e7eb      	b.n	8005450 <_printf_i+0x214>
 8005478:	2500      	movs	r5, #0
 800547a:	f104 0619 	add.w	r6, r4, #25
 800547e:	e7f5      	b.n	800546c <_printf_i+0x230>
 8005480:	0800f2c5 	.word	0x0800f2c5
 8005484:	0800f2d6 	.word	0x0800f2d6

08005488 <memchr>:
 8005488:	4603      	mov	r3, r0
 800548a:	b510      	push	{r4, lr}
 800548c:	b2c9      	uxtb	r1, r1
 800548e:	4402      	add	r2, r0
 8005490:	4293      	cmp	r3, r2
 8005492:	4618      	mov	r0, r3
 8005494:	d101      	bne.n	800549a <memchr+0x12>
 8005496:	2000      	movs	r0, #0
 8005498:	e003      	b.n	80054a2 <memchr+0x1a>
 800549a:	7804      	ldrb	r4, [r0, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	428c      	cmp	r4, r1
 80054a0:	d1f6      	bne.n	8005490 <memchr+0x8>
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <memcpy>:
 80054a4:	440a      	add	r2, r1
 80054a6:	4291      	cmp	r1, r2
 80054a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ac:	d100      	bne.n	80054b0 <memcpy+0xc>
 80054ae:	4770      	bx	lr
 80054b0:	b510      	push	{r4, lr}
 80054b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054bc:	d1f9      	bne.n	80054b2 <memcpy+0xe>
 80054be:	bd10      	pop	{r4, pc}

080054c0 <memmove>:
 80054c0:	4288      	cmp	r0, r1
 80054c2:	b510      	push	{r4, lr}
 80054c4:	eb01 0402 	add.w	r4, r1, r2
 80054c8:	d902      	bls.n	80054d0 <memmove+0x10>
 80054ca:	4284      	cmp	r4, r0
 80054cc:	4623      	mov	r3, r4
 80054ce:	d807      	bhi.n	80054e0 <memmove+0x20>
 80054d0:	1e43      	subs	r3, r0, #1
 80054d2:	42a1      	cmp	r1, r4
 80054d4:	d008      	beq.n	80054e8 <memmove+0x28>
 80054d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054de:	e7f8      	b.n	80054d2 <memmove+0x12>
 80054e0:	4601      	mov	r1, r0
 80054e2:	4402      	add	r2, r0
 80054e4:	428a      	cmp	r2, r1
 80054e6:	d100      	bne.n	80054ea <memmove+0x2a>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054f2:	e7f7      	b.n	80054e4 <memmove+0x24>

080054f4 <_free_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4605      	mov	r5, r0
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d043      	beq.n	8005584 <_free_r+0x90>
 80054fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005500:	1f0c      	subs	r4, r1, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfb8      	it	lt
 8005506:	18e4      	addlt	r4, r4, r3
 8005508:	f000 f8d0 	bl	80056ac <__malloc_lock>
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <_free_r+0x94>)
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	4610      	mov	r0, r2
 8005512:	b933      	cbnz	r3, 8005522 <_free_r+0x2e>
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6014      	str	r4, [r2, #0]
 8005518:	4628      	mov	r0, r5
 800551a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800551e:	f000 b8cb 	b.w	80056b8 <__malloc_unlock>
 8005522:	42a3      	cmp	r3, r4
 8005524:	d90a      	bls.n	800553c <_free_r+0x48>
 8005526:	6821      	ldr	r1, [r4, #0]
 8005528:	1862      	adds	r2, r4, r1
 800552a:	4293      	cmp	r3, r2
 800552c:	bf01      	itttt	eq
 800552e:	681a      	ldreq	r2, [r3, #0]
 8005530:	685b      	ldreq	r3, [r3, #4]
 8005532:	1852      	addeq	r2, r2, r1
 8005534:	6022      	streq	r2, [r4, #0]
 8005536:	6063      	str	r3, [r4, #4]
 8005538:	6004      	str	r4, [r0, #0]
 800553a:	e7ed      	b.n	8005518 <_free_r+0x24>
 800553c:	461a      	mov	r2, r3
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	b10b      	cbz	r3, 8005546 <_free_r+0x52>
 8005542:	42a3      	cmp	r3, r4
 8005544:	d9fa      	bls.n	800553c <_free_r+0x48>
 8005546:	6811      	ldr	r1, [r2, #0]
 8005548:	1850      	adds	r0, r2, r1
 800554a:	42a0      	cmp	r0, r4
 800554c:	d10b      	bne.n	8005566 <_free_r+0x72>
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	4401      	add	r1, r0
 8005552:	1850      	adds	r0, r2, r1
 8005554:	4283      	cmp	r3, r0
 8005556:	6011      	str	r1, [r2, #0]
 8005558:	d1de      	bne.n	8005518 <_free_r+0x24>
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	4401      	add	r1, r0
 8005560:	6011      	str	r1, [r2, #0]
 8005562:	6053      	str	r3, [r2, #4]
 8005564:	e7d8      	b.n	8005518 <_free_r+0x24>
 8005566:	d902      	bls.n	800556e <_free_r+0x7a>
 8005568:	230c      	movs	r3, #12
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	e7d4      	b.n	8005518 <_free_r+0x24>
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1821      	adds	r1, r4, r0
 8005572:	428b      	cmp	r3, r1
 8005574:	bf01      	itttt	eq
 8005576:	6819      	ldreq	r1, [r3, #0]
 8005578:	685b      	ldreq	r3, [r3, #4]
 800557a:	1809      	addeq	r1, r1, r0
 800557c:	6021      	streq	r1, [r4, #0]
 800557e:	6063      	str	r3, [r4, #4]
 8005580:	6054      	str	r4, [r2, #4]
 8005582:	e7c9      	b.n	8005518 <_free_r+0x24>
 8005584:	bd38      	pop	{r3, r4, r5, pc}
 8005586:	bf00      	nop
 8005588:	200000e0 	.word	0x200000e0

0800558c <_malloc_r>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	1ccd      	adds	r5, r1, #3
 8005590:	f025 0503 	bic.w	r5, r5, #3
 8005594:	3508      	adds	r5, #8
 8005596:	2d0c      	cmp	r5, #12
 8005598:	bf38      	it	cc
 800559a:	250c      	movcc	r5, #12
 800559c:	2d00      	cmp	r5, #0
 800559e:	4606      	mov	r6, r0
 80055a0:	db01      	blt.n	80055a6 <_malloc_r+0x1a>
 80055a2:	42a9      	cmp	r1, r5
 80055a4:	d903      	bls.n	80055ae <_malloc_r+0x22>
 80055a6:	230c      	movs	r3, #12
 80055a8:	6033      	str	r3, [r6, #0]
 80055aa:	2000      	movs	r0, #0
 80055ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ae:	f000 f87d 	bl	80056ac <__malloc_lock>
 80055b2:	4921      	ldr	r1, [pc, #132]	; (8005638 <_malloc_r+0xac>)
 80055b4:	680a      	ldr	r2, [r1, #0]
 80055b6:	4614      	mov	r4, r2
 80055b8:	b99c      	cbnz	r4, 80055e2 <_malloc_r+0x56>
 80055ba:	4f20      	ldr	r7, [pc, #128]	; (800563c <_malloc_r+0xb0>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	b923      	cbnz	r3, 80055ca <_malloc_r+0x3e>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 f862 	bl	800568c <_sbrk_r>
 80055c8:	6038      	str	r0, [r7, #0]
 80055ca:	4629      	mov	r1, r5
 80055cc:	4630      	mov	r0, r6
 80055ce:	f000 f85d 	bl	800568c <_sbrk_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	d123      	bne.n	800561e <_malloc_r+0x92>
 80055d6:	230c      	movs	r3, #12
 80055d8:	4630      	mov	r0, r6
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f000 f86c 	bl	80056b8 <__malloc_unlock>
 80055e0:	e7e3      	b.n	80055aa <_malloc_r+0x1e>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	1b5b      	subs	r3, r3, r5
 80055e6:	d417      	bmi.n	8005618 <_malloc_r+0x8c>
 80055e8:	2b0b      	cmp	r3, #11
 80055ea:	d903      	bls.n	80055f4 <_malloc_r+0x68>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	441c      	add	r4, r3
 80055f0:	6025      	str	r5, [r4, #0]
 80055f2:	e004      	b.n	80055fe <_malloc_r+0x72>
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	42a2      	cmp	r2, r4
 80055f8:	bf0c      	ite	eq
 80055fa:	600b      	streq	r3, [r1, #0]
 80055fc:	6053      	strne	r3, [r2, #4]
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 f85a 	bl	80056b8 <__malloc_unlock>
 8005604:	f104 000b 	add.w	r0, r4, #11
 8005608:	1d23      	adds	r3, r4, #4
 800560a:	f020 0007 	bic.w	r0, r0, #7
 800560e:	1ac2      	subs	r2, r0, r3
 8005610:	d0cc      	beq.n	80055ac <_malloc_r+0x20>
 8005612:	1a1b      	subs	r3, r3, r0
 8005614:	50a3      	str	r3, [r4, r2]
 8005616:	e7c9      	b.n	80055ac <_malloc_r+0x20>
 8005618:	4622      	mov	r2, r4
 800561a:	6864      	ldr	r4, [r4, #4]
 800561c:	e7cc      	b.n	80055b8 <_malloc_r+0x2c>
 800561e:	1cc4      	adds	r4, r0, #3
 8005620:	f024 0403 	bic.w	r4, r4, #3
 8005624:	42a0      	cmp	r0, r4
 8005626:	d0e3      	beq.n	80055f0 <_malloc_r+0x64>
 8005628:	1a21      	subs	r1, r4, r0
 800562a:	4630      	mov	r0, r6
 800562c:	f000 f82e 	bl	800568c <_sbrk_r>
 8005630:	3001      	adds	r0, #1
 8005632:	d1dd      	bne.n	80055f0 <_malloc_r+0x64>
 8005634:	e7cf      	b.n	80055d6 <_malloc_r+0x4a>
 8005636:	bf00      	nop
 8005638:	200000e0 	.word	0x200000e0
 800563c:	200000e4 	.word	0x200000e4

08005640 <_realloc_r>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	4607      	mov	r7, r0
 8005644:	4614      	mov	r4, r2
 8005646:	460e      	mov	r6, r1
 8005648:	b921      	cbnz	r1, 8005654 <_realloc_r+0x14>
 800564a:	4611      	mov	r1, r2
 800564c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005650:	f7ff bf9c 	b.w	800558c <_malloc_r>
 8005654:	b922      	cbnz	r2, 8005660 <_realloc_r+0x20>
 8005656:	f7ff ff4d 	bl	80054f4 <_free_r>
 800565a:	4625      	mov	r5, r4
 800565c:	4628      	mov	r0, r5
 800565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005660:	f000 f830 	bl	80056c4 <_malloc_usable_size_r>
 8005664:	42a0      	cmp	r0, r4
 8005666:	d20f      	bcs.n	8005688 <_realloc_r+0x48>
 8005668:	4621      	mov	r1, r4
 800566a:	4638      	mov	r0, r7
 800566c:	f7ff ff8e 	bl	800558c <_malloc_r>
 8005670:	4605      	mov	r5, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d0f2      	beq.n	800565c <_realloc_r+0x1c>
 8005676:	4631      	mov	r1, r6
 8005678:	4622      	mov	r2, r4
 800567a:	f7ff ff13 	bl	80054a4 <memcpy>
 800567e:	4631      	mov	r1, r6
 8005680:	4638      	mov	r0, r7
 8005682:	f7ff ff37 	bl	80054f4 <_free_r>
 8005686:	e7e9      	b.n	800565c <_realloc_r+0x1c>
 8005688:	4635      	mov	r5, r6
 800568a:	e7e7      	b.n	800565c <_realloc_r+0x1c>

0800568c <_sbrk_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	2300      	movs	r3, #0
 8005690:	4d05      	ldr	r5, [pc, #20]	; (80056a8 <_sbrk_r+0x1c>)
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fc faf8 	bl	8001c8c <_sbrk>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_sbrk_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_sbrk_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	200001d8 	.word	0x200001d8

080056ac <__malloc_lock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__malloc_lock+0x8>)
 80056ae:	f000 b811 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	200001e0 	.word	0x200001e0

080056b8 <__malloc_unlock>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__malloc_unlock+0x8>)
 80056ba:	f000 b80c 	b.w	80056d6 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	200001e0 	.word	0x200001e0

080056c4 <_malloc_usable_size_r>:
 80056c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c8:	1f18      	subs	r0, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bfbc      	itt	lt
 80056ce:	580b      	ldrlt	r3, [r1, r0]
 80056d0:	18c0      	addlt	r0, r0, r3
 80056d2:	4770      	bx	lr

080056d4 <__retarget_lock_acquire_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_release_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <_init>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr

080056e4 <_fini>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr
